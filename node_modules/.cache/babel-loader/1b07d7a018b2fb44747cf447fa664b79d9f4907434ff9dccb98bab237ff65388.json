{"ast":null,"code":"import * as THREE from 'three';\nimport Stats from 'three/addons/libs/stats.module.js';\nimport { GUI } from 'three/addons/libs/lil-gui.module.min.js';\nimport { OrbitControls } from 'three/addons/controls/OrbitControls.js';\nexport default {\n  name: 'HelloWorld',\n  data() {\n    return {\n      // Three.js 相关对象\n      camera: null,\n      scene: null,\n      renderer: null,\n      bulbLight: null,\n      bulbMat: null,\n      hemiLight: null,\n      stats: null,\n      // 性能监视器\n      floorMat: null,\n      cubeMat: null,\n      ballMat: null,\n      // 控制参数\n      previousShadowMap: false,\n      // 阴影映射控制\n      params: {\n        shadows: true,\n        // 是否显示阴影\n        exposure: 0.68,\n        // 曝光度\n        bulbPower: '800 lm (60W)',\n        // 默认灯泡功率\n        hemiIrradiance: '0.5 lx (Full Moon)' // 默认环境光照射度\n      },\n      // 灯泡功率映射表\n      bulbLuminousPowers: {\n        '110000 lm (1000W)': 110000,\n        '3500 lm (300W)': 3500,\n        '1700 lm (100W)': 1700,\n        '800 lm (60W)': 800,\n        '400 lm (40W)': 400,\n        '180 lm (25W)': 180,\n        '20 lm (4W)': 20,\n        'Off': 0\n      },\n      // 半球光照射强度映射表\n      hemiLuminousIrradiances: {\n        '0.0001 lx (Moonless Night)': 0.0001,\n        '0.002 lx (Night Airglow)': 0.002,\n        '0.5 lx (Full Moon)': 0.5,\n        '3.4 lx (City Twilight)': 3.4,\n        '50 lx (Living Room)': 50,\n        '100 lx (Very Overcast)': 100,\n        '350 lx (Office Room)': 350,\n        '400 lx (Sunrise/Sunset)': 400,\n        '1000 lx (Overcast)': 1000,\n        '18000 lx (Daylight)': 18000,\n        '50000 lx (Direct Sun)': 50000\n      }\n    };\n  },\n  mounted() {\n    this.init();\n  },\n  methods: {\n    init() {\n      const container = this.$el.querySelector('#container');\n      this.stats = new Stats();\n      container.appendChild(this.stats.dom);\n      this.camera = new THREE.PerspectiveCamera(50, window.innerWidth / window.innerHeight, 0.1, 100);\n      this.camera.position.x = -4;\n      this.camera.position.z = 4;\n      this.camera.position.y = 2;\n      this.scene = new THREE.Scene();\n\n      // 灯泡几何和材料的创建\n      const bulbGeometry = new THREE.SphereGeometry(0.02, 16, 8);\n      this.bulbLight = new THREE.PointLight(0xffee88, 1, 100, 2);\n      this.bulbMat = new THREE.MeshStandardMaterial({\n        emissive: 0xffffee,\n        emissiveIntensity: 1,\n        color: 0x000000\n      });\n      this.bulbLight.add(new THREE.Mesh(bulbGeometry, this.bulbMat));\n      this.bulbLight.position.set(0, 2, 0);\n      this.bulbLight.castShadow = true;\n      this.scene.add(this.bulbLight);\n\n      // 其他光源和材料的设置...\n      this.renderer = new THREE.WebGLRenderer();\n      this.renderer.shadowMap.enabled = true;\n      this.renderer.toneMapping = THREE.ReinhardToneMapping;\n      this.renderer.setPixelRatio(window.devicePixelRatio);\n      this.renderer.setSize(window.innerWidth, window.innerHeight);\n      container.appendChild(this.renderer.domElement);\n      const controls = new OrbitControls(this.camera, this.renderer.domElement);\n      controls.minDistance = 1;\n      controls.maxDistance = 20;\n      window.addEventListener('resize', this.onWindowResize);\n\n      // 材料和纹理\n      this.floorMat = new THREE.MeshStandardMaterial({\n        roughness: 0.8,\n        color: 0xffffff,\n        metalness: 0.2,\n        bumpScale: 1\n      });\n      const textureLoader = new THREE.TextureLoader();\n      textureLoader.load('img/hardwood2_diffuse.jpg', map => {\n        map.wrapS = THREE.RepeatWrapping;\n        map.wrapT = THREE.RepeatWrapping;\n        map.anisotropy = 4;\n        map.repeat.set(10, 24);\n        map.colorSpace = THREE.SRGBColorSpace;\n        this.floorMat.map = map;\n        this.floorMat.needsUpdate = true;\n      });\n      textureLoader.load('img/hardwood2_bump.jpg', function (map) {\n        map.wrapS = THREE.RepeatWrapping;\n        map.wrapT = THREE.RepeatWrapping;\n        map.anisotropy = 4;\n        map.repeat.set(10, 24);\n        this.floorMat.bumpMap = map;\n        this.floorMat.needsUpdate = true;\n      });\n      textureLoader.load('img/hardwood2_roughness.jpg', function (map) {\n        map.wrapS = THREE.RepeatWrapping;\n        map.wrapT = THREE.RepeatWrapping;\n        map.anisotropy = 4;\n        map.repeat.set(10, 24);\n        this.floorMat.roughnessMap = map;\n        this.floorMat.needsUpdate = true;\n      });\n      this.cubeMat = new THREE.MeshStandardMaterial({\n        roughness: 0.7,\n        color: 0xffffff,\n        bumpScale: 1,\n        metalness: 0.2\n      });\n      textureLoader.load('img/brick_diffuse.jpg', function (map) {\n        map.wrapS = THREE.RepeatWrapping;\n        map.wrapT = THREE.RepeatWrapping;\n        map.anisotropy = 4;\n        map.repeat.set(1, 1);\n        map.colorSpace = THREE.SRGBColorSpace;\n        this.cubeMat.map = map;\n        this.cubeMat.needsUpdate = true;\n      });\n      textureLoader.load('img/brick_bump.jpg', function (map) {\n        map.wrapS = THREE.RepeatWrapping;\n        map.wrapT = THREE.RepeatWrapping;\n        map.anisotropy = 4;\n        map.repeat.set(1, 1);\n        this.cubeMat.bumpMap = map;\n        this.cubeMat.needsUpdate = true;\n      });\n      this.ballMat = new THREE.MeshStandardMaterial({\n        color: 0xffffff,\n        roughness: 0.5,\n        metalness: 1.0\n      });\n      textureLoader.load('img/earth_atmos_2048.jpg', function (map) {\n        map.anisotropy = 4;\n        map.colorSpace = THREE.SRGBColorSpace;\n        this.ballMat.map = map;\n        this.ballMat.needsUpdate = true;\n      });\n      textureLoader.load('img/earth_specular_2048.jpg', function (map) {\n        map.anisotropy = 4;\n        map.colorSpace = THREE.SRGBColorSpace;\n        this.ballMat.metalnessMap = map;\n        this.ballMat.needsUpdate = true;\n      });\n\n      // 几何体和网格\n      const floorGeometry = new THREE.PlaneGeometry(20, 20);\n      const floorMesh = new THREE.Mesh(floorGeometry, this.floorMat);\n      floorMesh.receiveShadow = true;\n      floorMesh.rotation.x = -Math.PI / 2.0;\n      this.scene.add(floorMesh);\n      const ballGeometry = new THREE.SphereGeometry(0.25, 32, 32);\n      const ballMesh = new THREE.Mesh(ballGeometry, this.ballMat);\n      ballMesh.position.set(1, 0.25, 1);\n      ballMesh.rotation.y = Math.PI;\n      ballMesh.castShadow = true;\n      this.scene.add(ballMesh);\n      const boxGeometry = new THREE.BoxGeometry(0.5, 0.5, 0.5);\n      const boxMesh = new THREE.Mesh(boxGeometry, this.cubeMat);\n      boxMesh.position.set(-0.5, 0.25, -1);\n      boxMesh.castShadow = true;\n      this.scene.add(boxMesh);\n      const boxMesh2 = new THREE.Mesh(boxGeometry, this.cubeMat);\n      boxMesh2.position.set(0, 0.25, -5);\n      boxMesh2.castShadow = true;\n      this.scene.add(boxMesh2);\n      const boxMesh3 = new THREE.Mesh(boxGeometry, this.cubeMat);\n      boxMesh3.position.set(7, 0.25, 0);\n      boxMesh3.castShadow = true;\n      this.scene.add(boxMesh3);\n\n      // 窗口大小变化的事件处理\n      window.addEventListener('resize', this.onWindowResize);\n\n      // GUI 控制器\n      const gui = new GUI();\n      gui.add(this.params, 'hemiIrradiance', Object.keys(this.hemiLuminousIrradiances));\n      gui.add(this.params, 'bulbPower', Object.keys(this.bulbLuminousPowers));\n      gui.add(this.params, 'exposure', 0, 1);\n      gui.add(this.params, 'shadows');\n      gui.open();\n    },\n    animate() {\n      requestAnimationFrame(this.animate);\n      this.render();\n    },\n    render() {\n      // 更新渲染器的曝光度\n      this.renderer.toneMappingExposure = Math.pow(this.params.exposure, 5.0); // 适应非常明亮的场景\n      this.renderer.shadowMap.enabled = this.params.shadows;\n      this.bulbLight.castShadow = this.params.shadows;\n      if (this.params.shadows !== this.previousShadowMap) {\n        this.ballMat.needsUpdate = true;\n        this.cubeMat.needsUpdate = true;\n        this.floorMat.needsUpdate = true;\n        this.previousShadowMap = this.params.shadows;\n      }\n\n      // 设置灯泡的功率和辐射强度\n      this.bulbLight.power = this.bulbLuminousPowers[this.params.bulbPower];\n      this.bulbMat.emissiveIntensity = this.bulbLight.intensity / Math.pow(0.02, 2.0); // 从强度转换为灯泡表面的辐照度\n\n      this.hemiLight.intensity = this.hemiLuminousIrradiances[this.params.hemiIrradiance];\n\n      // 动画或时间相关的更新\n      const time = Date.now() * 0.0005;\n      this.bulbLight.position.y = Math.cos(time) * 0.75 + 1.25;\n\n      // 渲染场景和相机\n      this.renderer.render(this.scene, this.camera);\n\n      // 更新性能监视器\n      this.stats.update();\n    },\n    onWindowResize() {\n      this.camera.aspect = window.innerWidth / window.innerHeight;\n      this.camera.updateProjectionMatrix();\n      this.renderer.setSize(window.innerWidth, window.innerHeight);\n    }\n  }\n};","map":{"version":3,"names":["THREE","Stats","GUI","OrbitControls","name","data","camera","scene","renderer","bulbLight","bulbMat","hemiLight","stats","floorMat","cubeMat","ballMat","previousShadowMap","params","shadows","exposure","bulbPower","hemiIrradiance","bulbLuminousPowers","hemiLuminousIrradiances","mounted","init","methods","container","$el","querySelector","appendChild","dom","PerspectiveCamera","window","innerWidth","innerHeight","position","x","z","y","Scene","bulbGeometry","SphereGeometry","PointLight","MeshStandardMaterial","emissive","emissiveIntensity","color","add","Mesh","set","castShadow","WebGLRenderer","shadowMap","enabled","toneMapping","ReinhardToneMapping","setPixelRatio","devicePixelRatio","setSize","domElement","controls","minDistance","maxDistance","addEventListener","onWindowResize","roughness","metalness","bumpScale","textureLoader","TextureLoader","load","map","wrapS","RepeatWrapping","wrapT","anisotropy","repeat","colorSpace","SRGBColorSpace","needsUpdate","bumpMap","roughnessMap","metalnessMap","floorGeometry","PlaneGeometry","floorMesh","receiveShadow","rotation","Math","PI","ballGeometry","ballMesh","boxGeometry","BoxGeometry","boxMesh","boxMesh2","boxMesh3","gui","Object","keys","open","animate","requestAnimationFrame","render","toneMappingExposure","pow","power","intensity","time","Date","now","cos","update","aspect","updateProjectionMatrix"],"sources":["D:\\Course\\CG\\Final\\cgfinal\\src\\components\\HelloWorld.vue"],"sourcesContent":["\n<template>\n  <div>\n    <div id=\"container\"></div>\n  </div>\n</template>\n\n<script>\n\nimport * as THREE from 'three';\nimport Stats from 'three/addons/libs/stats.module.js';\nimport { GUI } from 'three/addons/libs/lil-gui.module.min.js';\nimport { OrbitControls } from 'three/addons/controls/OrbitControls.js';\n\nexport default {\n  name: 'HelloWorld',\n  data() {\n    return {\n      // Three.js 相关对象\n      camera: null,\n      scene: null,\n      renderer: null,\n      bulbLight: null,\n      bulbMat: null,\n      hemiLight: null,\n      stats: null, // 性能监视器\n      floorMat: null,\n      cubeMat: null,\n      ballMat: null,\n\n      // 控制参数\n      previousShadowMap: false, // 阴影映射控制\n      params: {\n        shadows: true, // 是否显示阴影\n        exposure: 0.68, // 曝光度\n        bulbPower: '800 lm (60W)', // 默认灯泡功率\n        hemiIrradiance: '0.5 lx (Full Moon)' // 默认环境光照射度\n      },\n\n      // 灯泡功率映射表\n      bulbLuminousPowers: {\n        '110000 lm (1000W)': 110000,\n        '3500 lm (300W)': 3500,\n        '1700 lm (100W)': 1700,\n        '800 lm (60W)': 800,\n        '400 lm (40W)': 400,\n        '180 lm (25W)': 180,\n        '20 lm (4W)': 20,\n        'Off': 0\n      },\n\n      // 半球光照射强度映射表\n      hemiLuminousIrradiances: {\n        '0.0001 lx (Moonless Night)': 0.0001,\n        '0.002 lx (Night Airglow)': 0.002,\n        '0.5 lx (Full Moon)': 0.5,\n        '3.4 lx (City Twilight)': 3.4,\n        '50 lx (Living Room)': 50,\n        '100 lx (Very Overcast)': 100,\n        '350 lx (Office Room)': 350,\n        '400 lx (Sunrise/Sunset)': 400,\n        '1000 lx (Overcast)': 1000,\n        '18000 lx (Daylight)': 18000,\n        '50000 lx (Direct Sun)': 50000\n      }\n    };\n  },\n\n  mounted() {\n    this.init();\n  },\n  methods: {\n    init() {\n      const container = this.$el.querySelector('#container');\n      this.stats = new Stats();\n      container.appendChild(this.stats.dom);\n\n      this.camera = new THREE.PerspectiveCamera(50, window.innerWidth / window.innerHeight, 0.1, 100);\n      this.camera.position.x = -4;\n      this.camera.position.z = 4;\n      this.camera.position.y = 2;\n\n      this.scene = new THREE.Scene();\n\n      // 灯泡几何和材料的创建\n      const bulbGeometry = new THREE.SphereGeometry(0.02, 16, 8);\n      this.bulbLight = new THREE.PointLight(0xffee88, 1, 100, 2);\n\n      this.bulbMat = new THREE.MeshStandardMaterial({\n        emissive: 0xffffee,\n        emissiveIntensity: 1,\n        color: 0x000000\n      });\n      this.bulbLight.add(new THREE.Mesh(bulbGeometry, this.bulbMat));\n      this.bulbLight.position.set(0, 2, 0);\n      this.bulbLight.castShadow = true;\n      this.scene.add(this.bulbLight);\n\n      // 其他光源和材料的设置...\n      this.renderer = new THREE.WebGLRenderer();\n      this.renderer.shadowMap.enabled = true;\n      this.renderer.toneMapping = THREE.ReinhardToneMapping;\n      this.renderer.setPixelRatio(window.devicePixelRatio);\n      this.renderer.setSize(window.innerWidth, window.innerHeight);\n      container.appendChild(this.renderer.domElement);\n\n      const controls = new OrbitControls(this.camera, this.renderer.domElement);\n      controls.minDistance = 1;\n      controls.maxDistance = 20;\n\n      window.addEventListener('resize', this.onWindowResize);\n\n      // 材料和纹理\n      this.floorMat = new THREE.MeshStandardMaterial({\n        roughness: 0.8,\n        color: 0xffffff,\n        metalness: 0.2,\n        bumpScale: 1\n      });\n      const textureLoader = new THREE.TextureLoader();\n      textureLoader.load('img/hardwood2_diffuse.jpg', (map) => {\n        map.wrapS = THREE.RepeatWrapping;\n        map.wrapT = THREE.RepeatWrapping;\n        map.anisotropy = 4;\n        map.repeat.set(10, 24);\n        map.colorSpace = THREE.SRGBColorSpace;\n        this.floorMat.map = map;\n        this.floorMat.needsUpdate = true;\n      });\n      textureLoader.load( 'img/hardwood2_bump.jpg', function ( map ) {\n\n        map.wrapS = THREE.RepeatWrapping;\n        map.wrapT = THREE.RepeatWrapping;\n        map.anisotropy = 4;\n        map.repeat.set(10, 24);\n        this.floorMat.bumpMap = map;\n        this.floorMat.needsUpdate = true;\n      });\n      textureLoader.load('img/hardwood2_roughness.jpg', function ( map ) {\n\n        map.wrapS = THREE.RepeatWrapping;\n        map.wrapT = THREE.RepeatWrapping;\n        map.anisotropy = 4;\n        map.repeat.set( 10, 24 );\n        this.floorMat.roughnessMap = map;\n        this.floorMat.needsUpdate = true;\n\n      } );\n      this.cubeMat = new THREE.MeshStandardMaterial( {\n        roughness: 0.7,\n        color: 0xffffff,\n        bumpScale: 1,\n        metalness: 0.2\n      } );\n      textureLoader.load( 'img/brick_diffuse.jpg', function ( map ) {\n\n        map.wrapS = THREE.RepeatWrapping;\n        map.wrapT = THREE.RepeatWrapping;\n        map.anisotropy = 4;\n        map.repeat.set( 1, 1 );\n        map.colorSpace = THREE.SRGBColorSpace;\n        this.cubeMat.map = map;\n        this.cubeMat.needsUpdate = true;\n\n      } );\n      textureLoader.load( 'img/brick_bump.jpg', function ( map ) {\n\n        map.wrapS = THREE.RepeatWrapping;\n        map.wrapT = THREE.RepeatWrapping;\n        map.anisotropy = 4;\n        map.repeat.set( 1, 1 );\n        this.cubeMat.bumpMap = map;\n        this.cubeMat.needsUpdate = true;\n\n      } );\n\n      this.ballMat = new THREE.MeshStandardMaterial( {\n        color: 0xffffff,\n        roughness: 0.5,\n        metalness: 1.0\n      } );\n      textureLoader.load('img/earth_atmos_2048.jpg', function ( map ) {\n\n        map.anisotropy = 4;\n        map.colorSpace = THREE.SRGBColorSpace;\n        this.ballMat.map = map;\n        this.ballMat.needsUpdate = true;\n\n      } );\n      textureLoader.load('img/earth_specular_2048.jpg', function ( map ) {\n\n        map.anisotropy = 4;\n        map.colorSpace = THREE.SRGBColorSpace;\n        this.ballMat.metalnessMap = map;\n        this.ballMat.needsUpdate = true;\n\n      } );\n\n      // 几何体和网格\n      const floorGeometry = new THREE.PlaneGeometry(20, 20);\n      const floorMesh = new THREE.Mesh(floorGeometry, this.floorMat);\n      floorMesh.receiveShadow = true;\n      floorMesh.rotation.x = -Math.PI / 2.0;\n      this.scene.add(floorMesh);\n\n      const ballGeometry = new THREE.SphereGeometry(0.25, 32, 32);\n      const ballMesh = new THREE.Mesh(ballGeometry, this.ballMat);\n      ballMesh.position.set(1, 0.25, 1);\n      ballMesh.rotation.y = Math.PI;\n      ballMesh.castShadow = true;\n      this.scene.add(ballMesh);\n\n      const boxGeometry = new THREE.BoxGeometry(0.5, 0.5, 0.5);\n      const boxMesh = new THREE.Mesh(boxGeometry, this.cubeMat);\n      boxMesh.position.set(-0.5, 0.25, -1);\n      boxMesh.castShadow = true;\n      this.scene.add(boxMesh);\n\n      const boxMesh2 = new THREE.Mesh( boxGeometry, this.cubeMat );\n      boxMesh2.position.set( 0, 0.25, - 5 );\n      boxMesh2.castShadow = true;\n      this.scene.add( boxMesh2 );\n\n      const boxMesh3 = new THREE.Mesh( boxGeometry, this.cubeMat );\n      boxMesh3.position.set( 7, 0.25, 0 );\n      boxMesh3.castShadow = true;\n      this.scene.add( boxMesh3 );\n\n      // 窗口大小变化的事件处理\n      window.addEventListener('resize', this.onWindowResize);\n\n      // GUI 控制器\n      const gui = new GUI();\n      gui.add(this.params, 'hemiIrradiance', Object.keys(this.hemiLuminousIrradiances));\n      gui.add(this.params, 'bulbPower', Object.keys(this.bulbLuminousPowers));\n      gui.add(this.params, 'exposure', 0, 1);\n      gui.add(this.params, 'shadows');\n\n      gui.open();\n\n    },\n    animate() {\n      requestAnimationFrame(this.animate);\n      this.render();\n    },\n    render() {\n      // 更新渲染器的曝光度\n      this.renderer.toneMappingExposure = Math.pow(this.params.exposure, 5.0); // 适应非常明亮的场景\n      this.renderer.shadowMap.enabled = this.params.shadows;\n      this.bulbLight.castShadow = this.params.shadows;\n\n      if (this.params.shadows !== this.previousShadowMap) {\n        this.ballMat.needsUpdate = true;\n        this.cubeMat.needsUpdate = true;\n        this.floorMat.needsUpdate = true;\n        this.previousShadowMap = this.params.shadows;\n      }\n\n      // 设置灯泡的功率和辐射强度\n      this.bulbLight.power = this.bulbLuminousPowers[this.params.bulbPower];\n      this.bulbMat.emissiveIntensity = this.bulbLight.intensity / Math.pow(0.02, 2.0); // 从强度转换为灯泡表面的辐照度\n\n      this.hemiLight.intensity = this.hemiLuminousIrradiances[this.params.hemiIrradiance];\n\n      // 动画或时间相关的更新\n      const time = Date.now() * 0.0005;\n      this.bulbLight.position.y = Math.cos(time) * 0.75 + 1.25;\n\n      // 渲染场景和相机\n      this.renderer.render(this.scene, this.camera);\n\n      // 更新性能监视器\n      this.stats.update();\n    },\n    onWindowResize() {\n      this.camera.aspect = window.innerWidth / window.innerHeight;\n      this.camera.updateProjectionMatrix();\n      this.renderer.setSize(window.innerWidth, window.innerHeight);\n    }\n  }\n}\n</script>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}