{"ast":null,"code":"import { createElementVNode as _createElementVNode, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  ref: \"container\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", null, [_createElementVNode(\"div\", _hoisted_1, null, 512 /* NEED_PATCH */)]);\n}","map":{"version":3,"names":["ref","_createElementBlock","_createElementVNode","_hoisted_1"],"sources":["D:\\Course\\CG\\Final\\cgfinal\\src\\components\\HelloWorld.vue"],"sourcesContent":["\n<template>\n  <div>\n    <div ref=\"container\"></div>\n  </div>\n</template>\n\n<script>\n\nimport * as THREE from 'three';\nimport Stats from 'three/addons/libs/stats.module.js';\nimport { GUI } from 'three/addons/libs/lil-gui.module.min.js';\nimport { OrbitControls } from 'three/addons/controls/OrbitControls.js';\n\nexport default {\n  name: 'HelloWorld',\n  data() {\n    return {\n      // 在这里声明您的数据属性\n      camera: null,\n      scene: null,\n      renderer: null,\n      bulbLight: null,\n      bulbMat: null,\n      hemiLight: null,\n      stats: null,\n      controls: null,\n      floorMat: null,\n      cubeMat: null,\n      ballMat: null,\n      previousShadowMap: false,\n      params: {\n        shadows: true,\n        exposure: 0.68,\n        bulbPower: '800 lm (60W)', // 初始值应与 GUI 设置匹配\n        hemiIrradiance: '0.0001 lx (Moonless Night)' // 同上\n      },\n      bulbLuminousPowers: {\n      },\n      hemiLuminousIrradiances: {\n      }\n    };\n  },\n  mounted() {\n    this.initThreeJS();\n    this.animate();\n  },\n\n  methods: {\n    initThreeJS() {\n      const container = this.$refs.container;\n\n      // Stats\n      this.stats = new Stats();\n      container.appendChild(this.stats.dom);\n\n      // Camera\n      this.camera = new THREE.PerspectiveCamera(50, window.innerWidth / window.innerHeight, 0.1, 100);\n      this.camera.position.set(-4, 2, 4);\n\n      // Scene\n      this.scene = new THREE.Scene();\n\n      // Lights and materials setup\n      this.setupLightsAndMaterials();\n\n      // Renderer\n      this.renderer = new THREE.WebGLRenderer({ antialias: true });\n      this.renderer.shadowMap.enabled = true;\n      this.renderer.toneMapping = THREE.ReinhardToneMapping;\n      this.renderer.setPixelRatio(window.devicePixelRatio);\n      this.renderer.setSize(window.innerWidth, window.innerHeight);\n      container.appendChild(this.renderer.domElement);\n\n      // Controls\n      this.controls = new OrbitControls(this.camera, this.renderer.domElement);\n      this.controls.minDistance = 1;\n      this.controls.maxDistance = 20;\n\n      // Window resize listener\n      window.addEventListener('resize', this.onWindowResize);\n\n      // GUI\n      this.setupGUI();\n    },\n\n    setupLightsAndMaterials() {\n      // 灯泡几何体和灯光\n      const bulbGeometry = new THREE.SphereGeometry(0.02, 16, 8);\n      this.bulbLight = new THREE.PointLight(0xffee88, 1, 100, 2);\n      this.bulbMat = new THREE.MeshStandardMaterial({\n        emissive: 0xffffee,\n        emissiveIntensity: 1,\n        color: 0x000000\n      });\n      this.bulbLight.add(new THREE.Mesh(bulbGeometry, this.bulbMat));\n      this.bulbLight.position.set(0, 2, 0);\n      this.bulbLight.castShadow = true;\n      this.scene.add(this.bulbLight);\n\n      // 半球光源\n      this.hemiLight = new THREE.HemisphereLight(0xddeeff, 0x0f0e0d, 0.02);\n      this.scene.add(this.hemiLight);\n\n      // 地板材质\n      this.floorMat = new THREE.MeshStandardMaterial({\n        roughness: 0.8,\n        color: 0xffffff,\n        metalness: 0.2,\n        bumpScale: 1\n      });\n      const textureLoader = new THREE.TextureLoader();\n      textureLoader.load('img/hardwood2_diffuse.jpg', (map) => {\n        map.wrapS = THREE.RepeatWrapping;\n        map.wrapT = THREE.RepeatWrapping;\n        map.anisotropy = 4;\n        map.repeat.set(10, 24);\n        map.colorSpace = THREE.SRGBColorSpace;\n        this.floorMat.map = map;\n        this.floorMat.needsUpdate = true;\n      });\n      textureLoader.load('img/hardwood2_bump.jpg', (map) => {\n        map.wrapS = THREE.RepeatWrapping;\n        map.wrapT = THREE.RepeatWrapping;\n        map.anisotropy = 4;\n        map.repeat.set(10, 24);\n        this.floorMat.bumpMap = map;\n        this.floorMat.needsUpdate = true;\n      });\n      textureLoader.load('img/hardwood2_roughness.jpg', (map) => {\n        map.wrapS = THREE.RepeatWrapping;\n        map.wrapT = THREE.RepeatWrapping;\n        map.anisotropy = 4;\n        map.repeat.set(10, 24);\n        this.floorMat.roughnessMap = map;\n        this.floorMat.needsUpdate = true;\n      });\n\n      // 创建地板\n      const floorGeometry = new THREE.PlaneGeometry(20, 20);\n      const floorMesh = new THREE.Mesh(floorGeometry, this.floorMat);\n      floorMesh.receiveShadow = true;\n      floorMesh.rotation.x = -Math.PI / 2.0;\n      this.scene.add(floorMesh);\n\n      // 方块材质\n      this.cubeMat = new THREE.MeshStandardMaterial({\n        roughness: 0.7,\n        color: 0xffffff,\n        bumpScale: 0.002,\n        metalness: 0.2\n      });\n      textureLoader.load('img/brick_diffuse.jpg', (map) => {\n        map.wrapS = THREE.RepeatWrapping;\n        map.wrapT = THREE.RepeatWrapping;\n        map.anisotropy = 4;\n        map.repeat.set(1, 1);\n        map.colorSpace = THREE.SRGBColorSpace;\n        this.cubeMat.map = map;\n        this.cubeMat.needsUpdate = true;\n      });\n      textureLoader.load('img/brick_bump.jpg', (map) => {\n        map.wrapS = THREE.RepeatWrapping;\n        map.wrapT = THREE.RepeatWrapping;\n        map.anisotropy = 4;\n        map.repeat.set(1, 1);\n        this.cubeMat.bumpMap = map;\n        this.cubeMat.needsUpdate = true;\n      });\n\n      // 创建方块\n      const boxGeometry = new THREE.BoxGeometry(0.5, 0.5, 0.5);\n      const boxMesh = new THREE.Mesh(boxGeometry, this.cubeMat);\n      boxMesh.position.set(-0.5, 0.25, -1);\n      boxMesh.castShadow = true;\n      this.scene.add(boxMesh);\n\n      // 球体材质\n      this.ballMat = new THREE.MeshStandardMaterial({\n        color: 0xffffff,\n        roughness: 0.5,\n        metalness: 1.0\n      });\n      textureLoader.load('img/earth_atmos_2048.jpg', (map) => {\n        map.anisotropy = 4;\n        map.colorSpace = THREE.SRGBColorSpace;\n        this.ballMat.map = map;\n        this.ballMat.needsUpdate = true;\n      });\n      textureLoader.load('img/earth_specular_2048.jpg', (map) => {\n        map.anisotropy = 4;\n        map.colorSpace = THREE.SRGBColorSpace;\n        this.ballMat.metalnessMap = map;\n        this.ballMat.needsUpdate = true;\n      });\n\n      // 创建球体\n      const ballGeometry = new THREE.SphereGeometry(0.25, 32, 32);\n      const ballMesh = new THREE.Mesh(ballGeometry, this.ballMat);\n      ballMesh.position.set(1, 0.25, 1);\n      ballMesh.castShadow = true;\n      this.scene.add(ballMesh);\n    },\n\n    setupGUI() {\n      // GUI 参数\n      const params = {\n        shadows: true,\n        exposure: 0.68,\n        bulbPower: Object.keys(this.bulbLuminousPowers)[4],\n        hemiIrradiance: Object.keys(this.hemiLuminousIrradiances)[0]\n      };\n\n      // 灯泡流明值\n      this.bulbLuminousPowers = {\n        '110000 lm (1000W)': 110000,\n        '3500 lm (300W)': 3500,\n        '1700 lm (100W)': 1700,\n        '800 lm (60W)': 800,\n        '400 lm (40W)': 400,\n        '180 lm (25W)': 180,\n        '20 lm (4W)': 20,\n        'Off': 0\n      };\n\n      // 半球辐照度\n      this.hemiLuminousIrradiances = {\n        '0.0001 lx (Moonless Night)': 0.0001,\n        '0.002 lx (Night Airglow)': 0.002,\n        '0.5 lx (Full Moon)': 0.5,\n        '3.4 lx (City Twilight)': 3.4,\n        '50 lx (Living Room)': 50,\n        '100 lx (Very Overcast)': 100,\n        '350 lx (Office Room)': 350,\n        '400 lx (Sunrise/Sunset)': 400,\n        '1000 lx (Overcast)': 1000,\n        '18000 lx (Daylight)': 18000,\n        '50000 lx (Direct Sun)': 50000\n      };\n\n      // GUI 设置\n      const gui = new GUI();\n\n      gui.add(params, 'hemiIrradiance', Object.keys(this.hemiLuminousIrradiances)).onChange(value => {\n        this.hemiLight.intensity = this.hemiLuminousIrradiances[value];\n      });\n      gui.add(params, 'bulbPower', Object.keys(this.bulbLuminousPowers)).onChange(value => {\n        this.bulbLight.power = this.bulbLuminousPowers[value];\n        this.bulbMat.emissiveIntensity = this.bulbLight.intensity / Math.pow(0.02, 2.0); // 从强度转换到表面辐照度\n      });\n      gui.add(params, 'exposure', 0, 1).onChange(value => {\n        this.renderer.toneMappingExposure = Math.pow(value, 5.0); // 允许非常明亮的场景\n      });\n      gui.add(params, 'shadows').onChange(value => {\n        this.renderer.shadowMap.enabled = value;\n        this.bulbLight.castShadow = value;\n        this.updateMaterials();\n      });\n\n      // 更新材质以反应阴影变化\n      this.updateMaterials = () => {\n        this.ballMat.needsUpdate = true;\n        this.cubeMat.needsUpdate = true;\n        this.floorMat.needsUpdate = true;\n      };\n    },\n\n    animate() {\n      // Animation loop\n      requestAnimationFrame(this.animate);\n      this.render();\n    },\n\n    render() {\n      this.renderer.toneMappingExposure = Math.pow(this.params.exposure, 5.0); // 允许非常明亮的场景\n      this.renderer.shadowMap.enabled = this.params.shadows;\n      this.bulbLight.castShadow = this.params.shadows;\n\n      if (this.params.shadows !== this.previousShadowMap) {\n        // 更新材质以反映阴影的变化\n        this.ballMat.needsUpdate = true;\n        this.cubeMat.needsUpdate = true;\n        this.floorMat.needsUpdate = true;\n        this.previousShadowMap = this.params.shadows;\n      }\n\n      // 更新灯泡的功率和半球光源的强度\n      this.bulbLight.power = this.bulbLuminousPowers[this.params.bulbPower];\n      this.bulbMat.emissiveIntensity = this.bulbLight.intensity / Math.pow(0.02, 2.0); // 从强度转换到表面辐照度\n      this.hemiLight.intensity = this.hemiLuminousIrradiances[this.params.hemiIrradiance];\n\n      const time = Date.now() * 0.0005;\n      this.bulbLight.position.y = Math.cos(time) * 0.75 + 1.25;\n\n      this.renderer.render(this.scene, this.camera);\n\n      this.stats.update();\n    },\n\n    onWindowResize() {\n      this.camera.aspect = window.innerWidth / window.innerHeight;\n      this.camera.updateProjectionMatrix();\n      this.renderer.setSize(window.innerWidth, window.innerHeight);\n    },\n  }\n};\n</script>"],"mappings":";;EAGSA,GAAG,EAAC;AAAW;;uBADtBC,mBAAA,CAEM,cADJC,mBAAA,CAA2B,OAA3BC,UAA2B,8B"},"metadata":{},"sourceType":"module","externalDependencies":[]}