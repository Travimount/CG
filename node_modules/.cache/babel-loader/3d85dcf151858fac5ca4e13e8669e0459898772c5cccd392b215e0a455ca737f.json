{"ast":null,"code":"import * as THREE from 'three';\nimport Stats from 'three/addons/libs/stats.module.js';\nimport { GUI } from 'three/addons/libs/lil-gui.module.min.js';\nimport { OrbitControls } from 'three/addons/controls/OrbitControls.js';\nexport default {\n  name: 'HelloWorld',\n  data() {\n    return {\n      camera: null,\n      scene: null,\n      renderer: null,\n      bulbLight: null,\n      bulbMat: null,\n      hemiLight: null,\n      stats: null,\n      ballMat: null,\n      cubeMat: null,\n      floorMat: null,\n      previousShadowMap: false,\n      bulbLuminousPowers: {\n        '110000 lm (1000W)': 110000,\n        '3500 lm (300W)': 3500,\n        '1700 lm (100W)': 1700,\n        '800 lm (60W)': 800,\n        '400 lm (40W)': 400,\n        '180 lm (25W)': 180,\n        '20 lm (4W)': 20,\n        'Off': 0\n      },\n      hemiLuminousIrradiances: {\n        '0.0001 lx (Moonless Night)': 0.0001,\n        '0.002 lx (Night Airglow)': 0.002,\n        '0.5 lx (Full Moon)': 0.5,\n        '3.4 lx (City Twilight)': 3.4,\n        '50 lx (Living Room)': 50,\n        '100 lx (Very Overcast)': 100,\n        '350 lx (Office Room)': 350,\n        '400 lx (Sunrise/Sunset)': 400,\n        '1000 lx (Overcast)': 1000,\n        '18000 lx (Daylight)': 18000,\n        '50000 lx (Direct Sun)': 50000\n      },\n      params: {\n        shadows: true,\n        exposure: 0.68,\n        bulbPower: '800 lm (60W)',\n        hemiIrradiance: '0.0001 lx (Moonless Night)'\n      }\n    };\n  },\n  mounted() {\n    this.initThreeJS();\n    this.animate();\n  },\n  methods: {\n    initThreeJS() {\n      const container = this.$el.querySelector('#container');\n\n      // Stats\n      this.stats = new Stats();\n      container.appendChild(this.stats.dom);\n\n      // Camera\n      this.camera = new THREE.PerspectiveCamera(50, window.innerWidth / window.innerHeight, 0.1, 100);\n      this.camera.position.set(-4, 2, 4);\n\n      // Scene\n      this.scene = new THREE.Scene();\n\n      // Bulb Light\n      const bulbGeometry = new THREE.SphereGeometry(0.02, 16, 8);\n      this.bulbLight = new THREE.PointLight(0xffee88, 1, 100, 2);\n      this.bulbMat = new THREE.MeshStandardMaterial({\n        emissive: 0xffffee,\n        emissiveIntensity: 1,\n        color: 0x000000\n      });\n      this.bulbLight.add(new THREE.Mesh(bulbGeometry, this.bulbMat));\n      this.bulbLight.position.set(0, 2, 0);\n      this.bulbLight.castShadow = true;\n      this.scene.add(this.bulbLight);\n\n      // Hemisphere Light\n      this.hemiLight = new THREE.HemisphereLight(0xddeeff, 0x0f0e0d, 0.02);\n      this.scene.add(this.hemiLight);\n\n      // Materials\n      this.initMaterials();\n\n      // Floor\n      const floorGeometry = new THREE.PlaneGeometry(20, 20);\n      const floorMesh = new THREE.Mesh(floorGeometry, this.floorMat);\n      floorMesh.receiveShadow = true;\n      floorMesh.rotation.x = -Math.PI / 2.0;\n      this.scene.add(floorMesh);\n\n      // Ball\n      const ballGeometry = new THREE.SphereGeometry(0.25, 32, 32);\n      const ballMesh = new THREE.Mesh(ballGeometry, this.ballMat);\n      ballMesh.position.set(1, 0.25, 1);\n      ballMesh.rotation.y = Math.PI;\n      ballMesh.castShadow = true;\n      this.scene.add(ballMesh);\n\n      // Box\n      const boxGeometry = new THREE.BoxGeometry(0.5, 0.5, 0.5);\n      this.createBoxMesh(boxGeometry, -0.5, 0.25, -1);\n      this.createBoxMesh(boxGeometry, 0, 0.25, -5);\n      this.createBoxMesh(boxGeometry, 7, 0.25, 0);\n\n      // Renderer\n      this.renderer = new THREE.WebGLRenderer();\n      this.renderer.shadowMap.enabled = true;\n      this.renderer.toneMapping = THREE.ReinhardToneMapping;\n      this.renderer.setPixelRatio(window.devicePixelRatio);\n      this.renderer.setSize(window.innerWidth, window.innerHeight);\n      container.appendChild(this.renderer.domElement);\n\n      // Controls\n      const controls = new OrbitControls(this.camera, this.renderer.domElement);\n      controls.minDistance = 1;\n      controls.maxDistance = 20;\n\n      // Window resize listener\n      window.addEventListener('resize', this.onWindowResize);\n\n      // GUI\n      const gui = new GUI();\n      gui.add(this.params, 'hemiIrradiance', Object.keys(this.hemiLuminousIrradiances));\n      gui.add(this.params, 'bulbPower', Object.keys(this.bulbLuminousPowers));\n      gui.add(this.params, 'exposure', 0, 1);\n      gui.add(this.params, 'shadows');\n      gui.open();\n    },\n    animate() {\n      // Animation loop\n      requestAnimationFrame(this.animate);\n      this.render();\n    },\n    render() {\n      this.renderer.toneMappingExposure = Math.pow(this.params.exposure, 5.0); // Bright scenes\n      this.renderer.shadowMap.enabled = this.params.shadows;\n      this.bulbLight.castShadow = this.params.shadows;\n      if (this.params.shadows !== this.previousShadowMap) {\n        this.ballMat.needsUpdate = true;\n        this.cubeMat.needsUpdate = true;\n        this.floorMat.needsUpdate = true;\n        this.previousShadowMap = this.params.shadows;\n      }\n      this.bulbLight.power = this.bulbLuminousPowers[this.params.bulbPower];\n      this.bulbMat.emissiveIntensity = this.bulbLight.intensity / Math.pow(0.02, 2.0);\n      this.hemiLight.intensity = this.hemiLuminousIrradiances[this.params.hemiIrradiance];\n      const time = Date.now() * 0.0005;\n      this.bulbLight.position.y = Math.cos(time) * 0.75 + 1.25;\n      this.renderer.render(this.scene, this.camera);\n      this.stats.update();\n    },\n    onWindowResize() {\n      this.camera.aspect = window.innerWidth / window.innerHeight;\n      this.camera.updateProjectionMatrix();\n      this.renderer.setSize(window.innerWidth, window.innerHeight);\n    },\n    initMaterials() {\n      // Floor Material\n      this.floorMat = new THREE.MeshStandardMaterial({\n        roughness: 0.8,\n        color: 0xffffff,\n        metalness: 0.2,\n        bumpScale: 1\n      });\n      this.textureLoader.load('img/hardwood2_diffuse.jpg', map => {\n        map.wrapS = THREE.RepeatWrapping;\n        map.wrapT = THREE.RepeatWrapping;\n        map.anisotropy = 4;\n        map.repeat.set(10, 24);\n        map.colorSpace = THREE.SRGBColorSpace;\n        this.floorMat.map = map;\n        this.floorMat.needsUpdate = true;\n      });\n      this.textureLoader.load('img/hardwood2_bump.jpg', map => {\n        map.wrapS = THREE.RepeatWrapping;\n        map.wrapT = THREE.RepeatWrapping;\n        map.anisotropy = 4;\n        map.repeat.set(10, 24);\n        this.floorMat.bumpMap = map;\n        this.floorMat.needsUpdate = true;\n      });\n      this.textureLoader.load('img/hardwood2_roughness.jpg', map => {\n        map.wrapS = THREE.RepeatWrapping;\n        map.wrapT = THREE.RepeatWrapping;\n        map.anisotropy = 4;\n        map.repeat.set(10, 24);\n        this.floorMat.roughnessMap = map;\n        this.floorMat.needsUpdate = true;\n      });\n\n      // Cube Material\n      this.cubeMat = new THREE.MeshStandardMaterial({\n        roughness: 0.7,\n        color: 0xffffff,\n        bumpScale: 1,\n        metalness: 0.2\n      });\n      this.textureLoader.load('img/brick_diffuse.jpg', map => {\n        map.wrapS = THREE.RepeatWrapping;\n        map.wrapT = THREE.RepeatWrapping;\n        map.anisotropy = 4;\n        map.repeat.set(1, 1);\n        map.colorSpace = THREE.SRGBColorSpace;\n        this.cubeMat.map = map;\n        this.cubeMat.needsUpdate = true;\n      });\n      this.textureLoader.load('img/brick_bump.jpg', map => {\n        map.wrapS = THREE.RepeatWrapping;\n        map.wrapT = THREE.RepeatWrapping;\n        map.anisotropy = 4;\n        map.repeat.set(1, 1);\n        this.cubeMat.bumpMap = map;\n        this.cubeMat.needsUpdate = true;\n      });\n\n      // Ball Material\n      this.ballMat = new THREE.MeshStandardMaterial({\n        color: 0xffffff,\n        roughness: 0.5,\n        metalness: 1.0\n      });\n      this.textureLoader.load('img/earth_atmos_2048.jpg', map => {\n        map.anisotropy = 4;\n        map.colorSpace = THREE.SRGBColorSpace;\n        this.ballMat.map = map;\n        this.ballMat.needsUpdate = true;\n      });\n      this.textureLoader.load('img/earth_specular_2048.jpg', map => {\n        map.anisotropy = 4;\n        map.colorSpace = THREE.SRGBColorSpace;\n        this.ballMat.metalnessMap = map;\n        this.ballMat.needsUpdate = true;\n      });\n    },\n    createBoxMesh(geometry, x, y, z) {\n      const mesh = new THREE.Mesh(geometry, this.cubeMat);\n      mesh.position.set(x, y, z);\n      mesh.castShadow = true;\n      this.scene.add(mesh);\n    }\n  }\n};","map":{"version":3,"names":["THREE","Stats","GUI","OrbitControls","name","data","camera","scene","renderer","bulbLight","bulbMat","hemiLight","stats","ballMat","cubeMat","floorMat","previousShadowMap","bulbLuminousPowers","hemiLuminousIrradiances","params","shadows","exposure","bulbPower","hemiIrradiance","mounted","initThreeJS","animate","methods","container","$el","querySelector","appendChild","dom","PerspectiveCamera","window","innerWidth","innerHeight","position","set","Scene","bulbGeometry","SphereGeometry","PointLight","MeshStandardMaterial","emissive","emissiveIntensity","color","add","Mesh","castShadow","HemisphereLight","initMaterials","floorGeometry","PlaneGeometry","floorMesh","receiveShadow","rotation","x","Math","PI","ballGeometry","ballMesh","y","boxGeometry","BoxGeometry","createBoxMesh","WebGLRenderer","shadowMap","enabled","toneMapping","ReinhardToneMapping","setPixelRatio","devicePixelRatio","setSize","domElement","controls","minDistance","maxDistance","addEventListener","onWindowResize","gui","Object","keys","open","requestAnimationFrame","render","toneMappingExposure","pow","needsUpdate","power","intensity","time","Date","now","cos","update","aspect","updateProjectionMatrix","roughness","metalness","bumpScale","textureLoader","load","map","wrapS","RepeatWrapping","wrapT","anisotropy","repeat","colorSpace","SRGBColorSpace","bumpMap","roughnessMap","metalnessMap","geometry","z","mesh"],"sources":["D:\\Course\\CG\\Final\\cgfinal\\src\\components\\HelloWorld.vue"],"sourcesContent":["<template>\n  <div id=\"container\"></div>\n</template>\n\n<script>\n\nimport * as THREE from 'three';\nimport Stats from 'three/addons/libs/stats.module.js';\nimport { GUI } from 'three/addons/libs/lil-gui.module.min.js';\nimport { OrbitControls } from 'three/addons/controls/OrbitControls.js';\n\nexport default {\n  name: 'HelloWorld',\n\n  data() {\n    return {\n      camera: null,\n      scene: null,\n      renderer: null,\n      bulbLight: null,\n      bulbMat: null,\n      hemiLight: null,\n      stats: null,\n      ballMat: null,\n      cubeMat: null,\n      floorMat: null,\n      previousShadowMap: false,\n      bulbLuminousPowers: {\n        '110000 lm (1000W)': 110000,\n        '3500 lm (300W)': 3500,\n        '1700 lm (100W)': 1700,\n        '800 lm (60W)': 800,\n        '400 lm (40W)': 400,\n        '180 lm (25W)': 180,\n        '20 lm (4W)': 20,\n        'Off': 0\n      },\n      hemiLuminousIrradiances: {\n        '0.0001 lx (Moonless Night)': 0.0001,\n        '0.002 lx (Night Airglow)': 0.002,\n        '0.5 lx (Full Moon)': 0.5,\n        '3.4 lx (City Twilight)': 3.4,\n        '50 lx (Living Room)': 50,\n        '100 lx (Very Overcast)': 100,\n        '350 lx (Office Room)': 350,\n        '400 lx (Sunrise/Sunset)': 400,\n        '1000 lx (Overcast)': 1000,\n        '18000 lx (Daylight)': 18000,\n        '50000 lx (Direct Sun)': 50000\n      },\n      params: {\n        shadows: true,\n        exposure: 0.68,\n        bulbPower: '800 lm (60W)',\n        hemiIrradiance: '0.0001 lx (Moonless Night)'\n      }\n    };\n  },\n  mounted() {\n    this.initThreeJS();\n    this.animate();\n  },\n\n  methods: {\n    initThreeJS() {\n      const container = this.$el.querySelector('#container');\n\n      // Stats\n      this.stats = new Stats();\n      container.appendChild(this.stats.dom);\n\n      // Camera\n      this.camera = new THREE.PerspectiveCamera(50, window.innerWidth / window.innerHeight, 0.1, 100);\n      this.camera.position.set(-4, 2, 4);\n\n      // Scene\n      this.scene = new THREE.Scene();\n\n      // Bulb Light\n      const bulbGeometry = new THREE.SphereGeometry(0.02, 16, 8);\n      this.bulbLight = new THREE.PointLight(0xffee88, 1, 100, 2);\n      this.bulbMat = new THREE.MeshStandardMaterial({\n        emissive: 0xffffee,\n        emissiveIntensity: 1,\n        color: 0x000000\n      });\n      this.bulbLight.add(new THREE.Mesh(bulbGeometry, this.bulbMat));\n      this.bulbLight.position.set(0, 2, 0);\n      this.bulbLight.castShadow = true;\n      this.scene.add(this.bulbLight);\n\n      // Hemisphere Light\n      this.hemiLight = new THREE.HemisphereLight(0xddeeff, 0x0f0e0d, 0.02);\n      this.scene.add(this.hemiLight);\n\n      // Materials\n      this.initMaterials();\n\n      // Floor\n      const floorGeometry = new THREE.PlaneGeometry(20, 20);\n      const floorMesh = new THREE.Mesh(floorGeometry, this.floorMat);\n      floorMesh.receiveShadow = true;\n      floorMesh.rotation.x = -Math.PI / 2.0;\n      this.scene.add(floorMesh);\n\n      // Ball\n      const ballGeometry = new THREE.SphereGeometry(0.25, 32, 32);\n      const ballMesh = new THREE.Mesh(ballGeometry, this.ballMat);\n      ballMesh.position.set(1, 0.25, 1);\n      ballMesh.rotation.y = Math.PI;\n      ballMesh.castShadow = true;\n      this.scene.add(ballMesh);\n\n      // Box\n      const boxGeometry = new THREE.BoxGeometry(0.5, 0.5, 0.5);\n      this.createBoxMesh(boxGeometry, -0.5, 0.25, -1);\n      this.createBoxMesh(boxGeometry, 0, 0.25, -5);\n      this.createBoxMesh(boxGeometry, 7, 0.25, 0);\n\n      // Renderer\n      this.renderer = new THREE.WebGLRenderer();\n      this.renderer.shadowMap.enabled = true;\n      this.renderer.toneMapping = THREE.ReinhardToneMapping;\n      this.renderer.setPixelRatio(window.devicePixelRatio);\n      this.renderer.setSize(window.innerWidth, window.innerHeight);\n      container.appendChild(this.renderer.domElement);\n\n      // Controls\n      const controls = new OrbitControls(this.camera, this.renderer.domElement);\n      controls.minDistance = 1;\n      controls.maxDistance = 20;\n\n      // Window resize listener\n      window.addEventListener('resize', this.onWindowResize);\n\n      // GUI\n      const gui = new GUI();\n      gui.add(this.params, 'hemiIrradiance', Object.keys(this.hemiLuminousIrradiances));\n      gui.add(this.params, 'bulbPower', Object.keys(this.bulbLuminousPowers));\n      gui.add(this.params, 'exposure', 0, 1);\n      gui.add(this.params, 'shadows');\n      gui.open();\n    },\n\n    animate() {\n      // Animation loop\n      requestAnimationFrame(this.animate);\n      this.render();\n    },\n\n    render() {\n      this.renderer.toneMappingExposure = Math.pow(this.params.exposure, 5.0); // Bright scenes\n      this.renderer.shadowMap.enabled = this.params.shadows;\n      this.bulbLight.castShadow = this.params.shadows;\n\n      if (this.params.shadows !== this.previousShadowMap) {\n        this.ballMat.needsUpdate = true;\n        this.cubeMat.needsUpdate = true;\n        this.floorMat.needsUpdate = true;\n        this.previousShadowMap = this.params.shadows;\n      }\n\n      this.bulbLight.power = this.bulbLuminousPowers[this.params.bulbPower];\n      this.bulbMat.emissiveIntensity = this.bulbLight.intensity / Math.pow(0.02, 2.0);\n\n      this.hemiLight.intensity = this.hemiLuminousIrradiances[this.params.hemiIrradiance];\n      const time = Date.now() * 0.0005;\n      this.bulbLight.position.y = Math.cos(time) * 0.75 + 1.25;\n\n      this.renderer.render(this.scene, this.camera);\n      this.stats.update();\n    },\n\n    onWindowResize() {\n      this.camera.aspect = window.innerWidth / window.innerHeight;\n      this.camera.updateProjectionMatrix();\n      this.renderer.setSize(window.innerWidth, window.innerHeight);\n    },\n\n    initMaterials() {\n      // Floor Material\n      this.floorMat = new THREE.MeshStandardMaterial({\n        roughness: 0.8,\n        color: 0xffffff,\n        metalness: 0.2,\n        bumpScale: 1\n      });\n      this.textureLoader.load('img/hardwood2_diffuse.jpg', (map) => {\n        map.wrapS = THREE.RepeatWrapping;\n        map.wrapT = THREE.RepeatWrapping;\n        map.anisotropy = 4;\n        map.repeat.set(10, 24);\n        map.colorSpace = THREE.SRGBColorSpace;\n        this.floorMat.map = map;\n        this.floorMat.needsUpdate = true;\n      });\n      this.textureLoader.load('img/hardwood2_bump.jpg', (map) => {\n        map.wrapS = THREE.RepeatWrapping;\n        map.wrapT = THREE.RepeatWrapping;\n        map.anisotropy = 4;\n        map.repeat.set(10, 24);\n        this.floorMat.bumpMap = map;\n        this.floorMat.needsUpdate = true;\n      });\n      this.textureLoader.load('img/hardwood2_roughness.jpg', (map) => {\n        map.wrapS = THREE.RepeatWrapping;\n        map.wrapT = THREE.RepeatWrapping;\n        map.anisotropy = 4;\n        map.repeat.set(10, 24);\n        this.floorMat.roughnessMap = map;\n        this.floorMat.needsUpdate = true;\n      });\n\n      // Cube Material\n      this.cubeMat = new THREE.MeshStandardMaterial({\n        roughness: 0.7,\n        color: 0xffffff,\n        bumpScale: 1,\n        metalness: 0.2\n      });\n      this.textureLoader.load('img/brick_diffuse.jpg', (map) => {\n        map.wrapS = THREE.RepeatWrapping;\n        map.wrapT = THREE.RepeatWrapping;\n        map.anisotropy = 4;\n        map.repeat.set(1, 1);\n        map.colorSpace = THREE.SRGBColorSpace;\n        this.cubeMat.map = map;\n        this.cubeMat.needsUpdate = true;\n      });\n      this.textureLoader.load('img/brick_bump.jpg', (map) => {\n        map.wrapS = THREE.RepeatWrapping;\n        map.wrapT = THREE.RepeatWrapping;\n        map.anisotropy = 4;\n        map.repeat.set(1, 1);\n        this.cubeMat.bumpMap = map;\n        this.cubeMat.needsUpdate = true;\n      });\n\n      // Ball Material\n      this.ballMat = new THREE.MeshStandardMaterial({\n        color: 0xffffff,\n        roughness: 0.5,\n        metalness: 1.0\n      });\n      this.textureLoader.load('img/earth_atmos_2048.jpg', (map) => {\n        map.anisotropy = 4;\n        map.colorSpace = THREE.SRGBColorSpace;\n        this.ballMat.map = map;\n        this.ballMat.needsUpdate = true;\n      });\n      this.textureLoader.load('img/earth_specular_2048.jpg', (map) => {\n        map.anisotropy = 4;\n        map.colorSpace = THREE.SRGBColorSpace;\n        this.ballMat.metalnessMap = map;\n        this.ballMat.needsUpdate = true;\n      });\n    },\n\n    createBoxMesh(geometry, x, y, z) {\n      const mesh = new THREE.Mesh(geometry, this.cubeMat);\n      mesh.position.set(x, y, z);\n      mesh.castShadow = true;\n      this.scene.add(mesh);\n    },\n  }\n};\n</script>"],"mappings":"AAMA,OAAO,KAAKA,KAAI,MAAO,OAAO;AAC9B,OAAOC,KAAI,MAAO,mCAAmC;AACrD,SAASC,GAAE,QAAS,yCAAyC;AAC7D,SAASC,aAAY,QAAS,wCAAwC;AAEtE,eAAe;EACbC,IAAI,EAAE,YAAY;EAElBC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,MAAM,EAAE,IAAI;MACZC,KAAK,EAAE,IAAI;MACXC,QAAQ,EAAE,IAAI;MACdC,SAAS,EAAE,IAAI;MACfC,OAAO,EAAE,IAAI;MACbC,SAAS,EAAE,IAAI;MACfC,KAAK,EAAE,IAAI;MACXC,OAAO,EAAE,IAAI;MACbC,OAAO,EAAE,IAAI;MACbC,QAAQ,EAAE,IAAI;MACdC,iBAAiB,EAAE,KAAK;MACxBC,kBAAkB,EAAE;QAClB,mBAAmB,EAAE,MAAM;QAC3B,gBAAgB,EAAE,IAAI;QACtB,gBAAgB,EAAE,IAAI;QACtB,cAAc,EAAE,GAAG;QACnB,cAAc,EAAE,GAAG;QACnB,cAAc,EAAE,GAAG;QACnB,YAAY,EAAE,EAAE;QAChB,KAAK,EAAE;MACT,CAAC;MACDC,uBAAuB,EAAE;QACvB,4BAA4B,EAAE,MAAM;QACpC,0BAA0B,EAAE,KAAK;QACjC,oBAAoB,EAAE,GAAG;QACzB,wBAAwB,EAAE,GAAG;QAC7B,qBAAqB,EAAE,EAAE;QACzB,wBAAwB,EAAE,GAAG;QAC7B,sBAAsB,EAAE,GAAG;QAC3B,yBAAyB,EAAE,GAAG;QAC9B,oBAAoB,EAAE,IAAI;QAC1B,qBAAqB,EAAE,KAAK;QAC5B,uBAAuB,EAAE;MAC3B,CAAC;MACDC,MAAM,EAAE;QACNC,OAAO,EAAE,IAAI;QACbC,QAAQ,EAAE,IAAI;QACdC,SAAS,EAAE,cAAc;QACzBC,cAAc,EAAE;MAClB;IACF,CAAC;EACH,CAAC;EACDC,OAAOA,CAAA,EAAG;IACR,IAAI,CAACC,WAAW,CAAC,CAAC;IAClB,IAAI,CAACC,OAAO,CAAC,CAAC;EAChB,CAAC;EAEDC,OAAO,EAAE;IACPF,WAAWA,CAAA,EAAG;MACZ,MAAMG,SAAQ,GAAI,IAAI,CAACC,GAAG,CAACC,aAAa,CAAC,YAAY,CAAC;;MAEtD;MACA,IAAI,CAAClB,KAAI,GAAI,IAAIX,KAAK,CAAC,CAAC;MACxB2B,SAAS,CAACG,WAAW,CAAC,IAAI,CAACnB,KAAK,CAACoB,GAAG,CAAC;;MAErC;MACA,IAAI,CAAC1B,MAAK,GAAI,IAAIN,KAAK,CAACiC,iBAAiB,CAAC,EAAE,EAAEC,MAAM,CAACC,UAAS,GAAID,MAAM,CAACE,WAAW,EAAE,GAAG,EAAE,GAAG,CAAC;MAC/F,IAAI,CAAC9B,MAAM,CAAC+B,QAAQ,CAACC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;;MAElC;MACA,IAAI,CAAC/B,KAAI,GAAI,IAAIP,KAAK,CAACuC,KAAK,CAAC,CAAC;;MAE9B;MACA,MAAMC,YAAW,GAAI,IAAIxC,KAAK,CAACyC,cAAc,CAAC,IAAI,EAAE,EAAE,EAAE,CAAC,CAAC;MAC1D,IAAI,CAAChC,SAAQ,GAAI,IAAIT,KAAK,CAAC0C,UAAU,CAAC,QAAQ,EAAE,CAAC,EAAE,GAAG,EAAE,CAAC,CAAC;MAC1D,IAAI,CAAChC,OAAM,GAAI,IAAIV,KAAK,CAAC2C,oBAAoB,CAAC;QAC5CC,QAAQ,EAAE,QAAQ;QAClBC,iBAAiB,EAAE,CAAC;QACpBC,KAAK,EAAE;MACT,CAAC,CAAC;MACF,IAAI,CAACrC,SAAS,CAACsC,GAAG,CAAC,IAAI/C,KAAK,CAACgD,IAAI,CAACR,YAAY,EAAE,IAAI,CAAC9B,OAAO,CAAC,CAAC;MAC9D,IAAI,CAACD,SAAS,CAAC4B,QAAQ,CAACC,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;MACpC,IAAI,CAAC7B,SAAS,CAACwC,UAAS,GAAI,IAAI;MAChC,IAAI,CAAC1C,KAAK,CAACwC,GAAG,CAAC,IAAI,CAACtC,SAAS,CAAC;;MAE9B;MACA,IAAI,CAACE,SAAQ,GAAI,IAAIX,KAAK,CAACkD,eAAe,CAAC,QAAQ,EAAE,QAAQ,EAAE,IAAI,CAAC;MACpE,IAAI,CAAC3C,KAAK,CAACwC,GAAG,CAAC,IAAI,CAACpC,SAAS,CAAC;;MAE9B;MACA,IAAI,CAACwC,aAAa,CAAC,CAAC;;MAEpB;MACA,MAAMC,aAAY,GAAI,IAAIpD,KAAK,CAACqD,aAAa,CAAC,EAAE,EAAE,EAAE,CAAC;MACrD,MAAMC,SAAQ,GAAI,IAAItD,KAAK,CAACgD,IAAI,CAACI,aAAa,EAAE,IAAI,CAACrC,QAAQ,CAAC;MAC9DuC,SAAS,CAACC,aAAY,GAAI,IAAI;MAC9BD,SAAS,CAACE,QAAQ,CAACC,CAAA,GAAI,CAACC,IAAI,CAACC,EAAC,GAAI,GAAG;MACrC,IAAI,CAACpD,KAAK,CAACwC,GAAG,CAACO,SAAS,CAAC;;MAEzB;MACA,MAAMM,YAAW,GAAI,IAAI5D,KAAK,CAACyC,cAAc,CAAC,IAAI,EAAE,EAAE,EAAE,EAAE,CAAC;MAC3D,MAAMoB,QAAO,GAAI,IAAI7D,KAAK,CAACgD,IAAI,CAACY,YAAY,EAAE,IAAI,CAAC/C,OAAO,CAAC;MAC3DgD,QAAQ,CAACxB,QAAQ,CAACC,GAAG,CAAC,CAAC,EAAE,IAAI,EAAE,CAAC,CAAC;MACjCuB,QAAQ,CAACL,QAAQ,CAACM,CAAA,GAAIJ,IAAI,CAACC,EAAE;MAC7BE,QAAQ,CAACZ,UAAS,GAAI,IAAI;MAC1B,IAAI,CAAC1C,KAAK,CAACwC,GAAG,CAACc,QAAQ,CAAC;;MAExB;MACA,MAAME,WAAU,GAAI,IAAI/D,KAAK,CAACgE,WAAW,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC;MACxD,IAAI,CAACC,aAAa,CAACF,WAAW,EAAE,CAAC,GAAG,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC;MAC/C,IAAI,CAACE,aAAa,CAACF,WAAW,EAAE,CAAC,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC;MAC5C,IAAI,CAACE,aAAa,CAACF,WAAW,EAAE,CAAC,EAAE,IAAI,EAAE,CAAC,CAAC;;MAE3C;MACA,IAAI,CAACvD,QAAO,GAAI,IAAIR,KAAK,CAACkE,aAAa,CAAC,CAAC;MACzC,IAAI,CAAC1D,QAAQ,CAAC2D,SAAS,CAACC,OAAM,GAAI,IAAI;MACtC,IAAI,CAAC5D,QAAQ,CAAC6D,WAAU,GAAIrE,KAAK,CAACsE,mBAAmB;MACrD,IAAI,CAAC9D,QAAQ,CAAC+D,aAAa,CAACrC,MAAM,CAACsC,gBAAgB,CAAC;MACpD,IAAI,CAAChE,QAAQ,CAACiE,OAAO,CAACvC,MAAM,CAACC,UAAU,EAAED,MAAM,CAACE,WAAW,CAAC;MAC5DR,SAAS,CAACG,WAAW,CAAC,IAAI,CAACvB,QAAQ,CAACkE,UAAU,CAAC;;MAE/C;MACA,MAAMC,QAAO,GAAI,IAAIxE,aAAa,CAAC,IAAI,CAACG,MAAM,EAAE,IAAI,CAACE,QAAQ,CAACkE,UAAU,CAAC;MACzEC,QAAQ,CAACC,WAAU,GAAI,CAAC;MACxBD,QAAQ,CAACE,WAAU,GAAI,EAAE;;MAEzB;MACA3C,MAAM,CAAC4C,gBAAgB,CAAC,QAAQ,EAAE,IAAI,CAACC,cAAc,CAAC;;MAEtD;MACA,MAAMC,GAAE,GAAI,IAAI9E,GAAG,CAAC,CAAC;MACrB8E,GAAG,CAACjC,GAAG,CAAC,IAAI,CAAC5B,MAAM,EAAE,gBAAgB,EAAE8D,MAAM,CAACC,IAAI,CAAC,IAAI,CAAChE,uBAAuB,CAAC,CAAC;MACjF8D,GAAG,CAACjC,GAAG,CAAC,IAAI,CAAC5B,MAAM,EAAE,WAAW,EAAE8D,MAAM,CAACC,IAAI,CAAC,IAAI,CAACjE,kBAAkB,CAAC,CAAC;MACvE+D,GAAG,CAACjC,GAAG,CAAC,IAAI,CAAC5B,MAAM,EAAE,UAAU,EAAE,CAAC,EAAE,CAAC,CAAC;MACtC6D,GAAG,CAACjC,GAAG,CAAC,IAAI,CAAC5B,MAAM,EAAE,SAAS,CAAC;MAC/B6D,GAAG,CAACG,IAAI,CAAC,CAAC;IACZ,CAAC;IAEDzD,OAAOA,CAAA,EAAG;MACR;MACA0D,qBAAqB,CAAC,IAAI,CAAC1D,OAAO,CAAC;MACnC,IAAI,CAAC2D,MAAM,CAAC,CAAC;IACf,CAAC;IAEDA,MAAMA,CAAA,EAAG;MACP,IAAI,CAAC7E,QAAQ,CAAC8E,mBAAkB,GAAI5B,IAAI,CAAC6B,GAAG,CAAC,IAAI,CAACpE,MAAM,CAACE,QAAQ,EAAE,GAAG,CAAC,EAAE;MACzE,IAAI,CAACb,QAAQ,CAAC2D,SAAS,CAACC,OAAM,GAAI,IAAI,CAACjD,MAAM,CAACC,OAAO;MACrD,IAAI,CAACX,SAAS,CAACwC,UAAS,GAAI,IAAI,CAAC9B,MAAM,CAACC,OAAO;MAE/C,IAAI,IAAI,CAACD,MAAM,CAACC,OAAM,KAAM,IAAI,CAACJ,iBAAiB,EAAE;QAClD,IAAI,CAACH,OAAO,CAAC2E,WAAU,GAAI,IAAI;QAC/B,IAAI,CAAC1E,OAAO,CAAC0E,WAAU,GAAI,IAAI;QAC/B,IAAI,CAACzE,QAAQ,CAACyE,WAAU,GAAI,IAAI;QAChC,IAAI,CAACxE,iBAAgB,GAAI,IAAI,CAACG,MAAM,CAACC,OAAO;MAC9C;MAEA,IAAI,CAACX,SAAS,CAACgF,KAAI,GAAI,IAAI,CAACxE,kBAAkB,CAAC,IAAI,CAACE,MAAM,CAACG,SAAS,CAAC;MACrE,IAAI,CAACZ,OAAO,CAACmC,iBAAgB,GAAI,IAAI,CAACpC,SAAS,CAACiF,SAAQ,GAAIhC,IAAI,CAAC6B,GAAG,CAAC,IAAI,EAAE,GAAG,CAAC;MAE/E,IAAI,CAAC5E,SAAS,CAAC+E,SAAQ,GAAI,IAAI,CAACxE,uBAAuB,CAAC,IAAI,CAACC,MAAM,CAACI,cAAc,CAAC;MACnF,MAAMoE,IAAG,GAAIC,IAAI,CAACC,GAAG,CAAC,IAAI,MAAM;MAChC,IAAI,CAACpF,SAAS,CAAC4B,QAAQ,CAACyB,CAAA,GAAIJ,IAAI,CAACoC,GAAG,CAACH,IAAI,IAAI,IAAG,GAAI,IAAI;MAExD,IAAI,CAACnF,QAAQ,CAAC6E,MAAM,CAAC,IAAI,CAAC9E,KAAK,EAAE,IAAI,CAACD,MAAM,CAAC;MAC7C,IAAI,CAACM,KAAK,CAACmF,MAAM,CAAC,CAAC;IACrB,CAAC;IAEDhB,cAAcA,CAAA,EAAG;MACf,IAAI,CAACzE,MAAM,CAAC0F,MAAK,GAAI9D,MAAM,CAACC,UAAS,GAAID,MAAM,CAACE,WAAW;MAC3D,IAAI,CAAC9B,MAAM,CAAC2F,sBAAsB,CAAC,CAAC;MACpC,IAAI,CAACzF,QAAQ,CAACiE,OAAO,CAACvC,MAAM,CAACC,UAAU,EAAED,MAAM,CAACE,WAAW,CAAC;IAC9D,CAAC;IAEDe,aAAaA,CAAA,EAAG;MACd;MACA,IAAI,CAACpC,QAAO,GAAI,IAAIf,KAAK,CAAC2C,oBAAoB,CAAC;QAC7CuD,SAAS,EAAE,GAAG;QACdpD,KAAK,EAAE,QAAQ;QACfqD,SAAS,EAAE,GAAG;QACdC,SAAS,EAAE;MACb,CAAC,CAAC;MACF,IAAI,CAACC,aAAa,CAACC,IAAI,CAAC,2BAA2B,EAAGC,GAAG,IAAK;QAC5DA,GAAG,CAACC,KAAI,GAAIxG,KAAK,CAACyG,cAAc;QAChCF,GAAG,CAACG,KAAI,GAAI1G,KAAK,CAACyG,cAAc;QAChCF,GAAG,CAACI,UAAS,GAAI,CAAC;QAClBJ,GAAG,CAACK,MAAM,CAACtE,GAAG,CAAC,EAAE,EAAE,EAAE,CAAC;QACtBiE,GAAG,CAACM,UAAS,GAAI7G,KAAK,CAAC8G,cAAc;QACrC,IAAI,CAAC/F,QAAQ,CAACwF,GAAE,GAAIA,GAAG;QACvB,IAAI,CAACxF,QAAQ,CAACyE,WAAU,GAAI,IAAI;MAClC,CAAC,CAAC;MACF,IAAI,CAACa,aAAa,CAACC,IAAI,CAAC,wBAAwB,EAAGC,GAAG,IAAK;QACzDA,GAAG,CAACC,KAAI,GAAIxG,KAAK,CAACyG,cAAc;QAChCF,GAAG,CAACG,KAAI,GAAI1G,KAAK,CAACyG,cAAc;QAChCF,GAAG,CAACI,UAAS,GAAI,CAAC;QAClBJ,GAAG,CAACK,MAAM,CAACtE,GAAG,CAAC,EAAE,EAAE,EAAE,CAAC;QACtB,IAAI,CAACvB,QAAQ,CAACgG,OAAM,GAAIR,GAAG;QAC3B,IAAI,CAACxF,QAAQ,CAACyE,WAAU,GAAI,IAAI;MAClC,CAAC,CAAC;MACF,IAAI,CAACa,aAAa,CAACC,IAAI,CAAC,6BAA6B,EAAGC,GAAG,IAAK;QAC9DA,GAAG,CAACC,KAAI,GAAIxG,KAAK,CAACyG,cAAc;QAChCF,GAAG,CAACG,KAAI,GAAI1G,KAAK,CAACyG,cAAc;QAChCF,GAAG,CAACI,UAAS,GAAI,CAAC;QAClBJ,GAAG,CAACK,MAAM,CAACtE,GAAG,CAAC,EAAE,EAAE,EAAE,CAAC;QACtB,IAAI,CAACvB,QAAQ,CAACiG,YAAW,GAAIT,GAAG;QAChC,IAAI,CAACxF,QAAQ,CAACyE,WAAU,GAAI,IAAI;MAClC,CAAC,CAAC;;MAEF;MACA,IAAI,CAAC1E,OAAM,GAAI,IAAId,KAAK,CAAC2C,oBAAoB,CAAC;QAC5CuD,SAAS,EAAE,GAAG;QACdpD,KAAK,EAAE,QAAQ;QACfsD,SAAS,EAAE,CAAC;QACZD,SAAS,EAAE;MACb,CAAC,CAAC;MACF,IAAI,CAACE,aAAa,CAACC,IAAI,CAAC,uBAAuB,EAAGC,GAAG,IAAK;QACxDA,GAAG,CAACC,KAAI,GAAIxG,KAAK,CAACyG,cAAc;QAChCF,GAAG,CAACG,KAAI,GAAI1G,KAAK,CAACyG,cAAc;QAChCF,GAAG,CAACI,UAAS,GAAI,CAAC;QAClBJ,GAAG,CAACK,MAAM,CAACtE,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC;QACpBiE,GAAG,CAACM,UAAS,GAAI7G,KAAK,CAAC8G,cAAc;QACrC,IAAI,CAAChG,OAAO,CAACyF,GAAE,GAAIA,GAAG;QACtB,IAAI,CAACzF,OAAO,CAAC0E,WAAU,GAAI,IAAI;MACjC,CAAC,CAAC;MACF,IAAI,CAACa,aAAa,CAACC,IAAI,CAAC,oBAAoB,EAAGC,GAAG,IAAK;QACrDA,GAAG,CAACC,KAAI,GAAIxG,KAAK,CAACyG,cAAc;QAChCF,GAAG,CAACG,KAAI,GAAI1G,KAAK,CAACyG,cAAc;QAChCF,GAAG,CAACI,UAAS,GAAI,CAAC;QAClBJ,GAAG,CAACK,MAAM,CAACtE,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC;QACpB,IAAI,CAACxB,OAAO,CAACiG,OAAM,GAAIR,GAAG;QAC1B,IAAI,CAACzF,OAAO,CAAC0E,WAAU,GAAI,IAAI;MACjC,CAAC,CAAC;;MAEF;MACA,IAAI,CAAC3E,OAAM,GAAI,IAAIb,KAAK,CAAC2C,oBAAoB,CAAC;QAC5CG,KAAK,EAAE,QAAQ;QACfoD,SAAS,EAAE,GAAG;QACdC,SAAS,EAAE;MACb,CAAC,CAAC;MACF,IAAI,CAACE,aAAa,CAACC,IAAI,CAAC,0BAA0B,EAAGC,GAAG,IAAK;QAC3DA,GAAG,CAACI,UAAS,GAAI,CAAC;QAClBJ,GAAG,CAACM,UAAS,GAAI7G,KAAK,CAAC8G,cAAc;QACrC,IAAI,CAACjG,OAAO,CAAC0F,GAAE,GAAIA,GAAG;QACtB,IAAI,CAAC1F,OAAO,CAAC2E,WAAU,GAAI,IAAI;MACjC,CAAC,CAAC;MACF,IAAI,CAACa,aAAa,CAACC,IAAI,CAAC,6BAA6B,EAAGC,GAAG,IAAK;QAC9DA,GAAG,CAACI,UAAS,GAAI,CAAC;QAClBJ,GAAG,CAACM,UAAS,GAAI7G,KAAK,CAAC8G,cAAc;QACrC,IAAI,CAACjG,OAAO,CAACoG,YAAW,GAAIV,GAAG;QAC/B,IAAI,CAAC1F,OAAO,CAAC2E,WAAU,GAAI,IAAI;MACjC,CAAC,CAAC;IACJ,CAAC;IAEDvB,aAAaA,CAACiD,QAAQ,EAAEzD,CAAC,EAAEK,CAAC,EAAEqD,CAAC,EAAE;MAC/B,MAAMC,IAAG,GAAI,IAAIpH,KAAK,CAACgD,IAAI,CAACkE,QAAQ,EAAE,IAAI,CAACpG,OAAO,CAAC;MACnDsG,IAAI,CAAC/E,QAAQ,CAACC,GAAG,CAACmB,CAAC,EAAEK,CAAC,EAAEqD,CAAC,CAAC;MAC1BC,IAAI,CAACnE,UAAS,GAAI,IAAI;MACtB,IAAI,CAAC1C,KAAK,CAACwC,GAAG,CAACqE,IAAI,CAAC;IACtB;EACF;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}