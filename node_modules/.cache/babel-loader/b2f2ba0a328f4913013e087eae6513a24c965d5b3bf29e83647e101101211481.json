{"ast":null,"code":"import { openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  ref: \"container\",\n  class: \"full-screen-container\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, null, 512 /* NEED_PATCH */);\n}","map":{"version":3,"names":["ref","class","_createElementBlock","_hoisted_1"],"sources":["D:\\Course\\CG\\Final\\cgfinal\\src\\components\\HelloWorld.vue"],"sourcesContent":["<template>\n  <div ref=\"container\" class=\"full-screen-container\"></div>\n</template>\n\n<script>\n\nimport * as THREE from 'three';\nimport Stats from 'three/addons/libs/stats.module.js';\nimport { GUI } from 'three/addons/libs/lil-gui.module.min.js';\nimport { OrbitControls } from 'three/addons/controls/OrbitControls.js';\nimport '../Shader/MeshShader'\nimport {MeshShader} from \"@/Shader/MeshShader\";\nexport default {\n  name: 'HelloWorld',\n  data() {\n    return {\n      bulbLuminousPowers: {\n        '110000 lm ': 110000,\n        '3500 lm ': 3500,\n        '1700 lm ': 1700,\n        '800 lm ': 800,\n        '400 lm ': 400,\n        '180 lm ': 180,\n        '20 lm ': 20,\n        'Off': 0\n      },\n      hemiLuminousIrradiances: {\n        '0.0001 lx ': 0.0001,\n        '0.002 lx ': 0.002,\n        '0.5 lx ': 0.5,\n        '3.4 lx ': 3.4,\n        '50 lx ': 50,\n        '100 lx ': 100,\n        '350 lx ': 350,\n        '400 lx ': 400,\n        '1000 lx ': 1000,\n        '18000 lx ': 18000,\n        '50000 lx ': 50000\n      },\n      // 参数设置\n      params: {\n        shadows: true,\n        exposure: 0.68,\n        bulbPower: '800 lm ',\n        hemiIrradiance: '0.0001 lx '\n      }\n    };\n  },\n  mounted() {\n    this.initThreeJS();\n    this.animate();\n  },\n\n  methods: {\n    initThreeJS() {\n      const container = this.$refs.container;\n\n      // Stats\n      this.stats = new Stats();\n      container.appendChild(this.stats.dom);\n\n      // 设置相机\n      this.camera = new THREE.PerspectiveCamera(50, window.innerWidth / window.innerHeight, 0.1, 100);\n      this.camera.position.set(-4, 2, 4);\n\n      // 设置场景\n      this.scene = new THREE.Scene();\n\n      // 设置灯光、材质、地板、球体、盒子等对象\n      const bulbGeometry = new THREE.SphereGeometry(0.02, 16, 8);\n      this.bulbLight = new THREE.PointLight(0xffee88, 1, 100, 2);\n      this.bulbMat = new THREE.MeshStandardMaterial({\n        emissive: 0xffffee,\n        emissiveIntensity: 1,\n        color: 0x000000\n      });\n      this.bulbLight.add(new THREE.Mesh(bulbGeometry, this.bulbMat));\n      this.bulbLight.position.set(0, 2, 0);\n      this.bulbLight.castShadow = true;\n      this.scene.add(this.bulbLight);\n\n      // 半球光源\n      this.hemiLight = new THREE.HemisphereLight(0xddeeff, 0x0f0e0d, 0.02);\n      this.scene.add(this.hemiLight);\n\n      //材质\n      this.initMaterials();\n\n      //地板\n      const floorGeometry = new THREE.PlaneGeometry(15, 15);\n      const floorMesh = new THREE.Mesh(floorGeometry, this.floorMat);\n      floorMesh.receiveShadow = true;\n      floorMesh.rotation.x = -Math.PI / 2.0;\n      this.scene.add(floorMesh);\n\n      //球体\n      const ballGeometry = new THREE.SphereGeometry(0.5, 32, 32);\n      this.ballMesh = new THREE.Mesh(ballGeometry, this.ballMat);\n      this.ballMesh.position.set(0, 1, 3);\n      this.ballMesh.rotation.y = Math.PI;\n      this.ballMesh.castShadow = true;\n      this.scene.add(this.ballMesh);\n\n      //盒子\n      const boxGeometry = new THREE.BoxGeometry(0.5, 0.5, 0.5);\n      this.createBoxMesh(boxGeometry, -3, 0.25, 0);\n      this.createBoxMesh(boxGeometry, 0, 0.25, -3);\n      this.createBoxMesh(boxGeometry, 3, 0.25, 0);\n\n      //渲染器\n      this.renderer = new THREE.WebGLRenderer({ antialias: true });\n      this.renderer.shadowMap.enabled = true;\n      this.renderer.toneMapping = THREE.ReinhardToneMapping;\n      this.renderer.setPixelRatio(window.devicePixelRatio);\n      this.renderer.setSize(window.innerWidth, window.innerHeight);\n      container.appendChild(this.renderer.domElement);\n\n      // 控制器\n      const controls = new OrbitControls(this.camera, this.renderer.domElement);\n      controls.minDistance = 1;\n      controls.maxDistance = 20;\n\n      //窗口尺寸变化\n      window.addEventListener('resize', this.onWindowResize);\n\n      // GUI\n      const gui = new GUI();\n      gui.add(this.params, 'hemiIrradiance', Object.keys(this.hemiLuminousIrradiances));\n      gui.add(this.params, 'bulbPower', Object.keys(this.bulbLuminousPowers));\n      gui.add(this.params, 'exposure', 0, 1);\n      gui.add(this.params, 'shadows');\n      gui.open();\n    },\n\n    animate() {\n      //动画循环\n      requestAnimationFrame(this.animate);\n      this.render();\n    },\n    //渲染函数\n    render() {\n      this.renderer.toneMappingExposure = Math.pow(this.params.exposure, 5.0); // Bright scenes\n      this.renderer.shadowMap.enabled = this.params.shadows;\n      this.bulbLight.castShadow = this.params.shadows;\n\n      if (this.params.shadows !== this.previousShadowMap) {\n        this.ballMat.needsUpdate = true;\n        this.cubeMat.needsUpdate = true;\n        this.floorMat.needsUpdate = true;\n        this.previousShadowMap = this.params.shadows;\n      }\n\n      this.bulbLight.power = this.bulbLuminousPowers[this.params.bulbPower];\n      this.bulbMat.emissiveIntensity = this.bulbLight.intensity / Math.pow(0.02, 2.0);\n\n      this.hemiLight.intensity = this.hemiLuminousIrradiances[this.params.hemiIrradiance];\n      const time = Date.now() * 0.0005;\n      const radius = 1.5;\n      this.bulbLight.position.x = Math.cos(time) * radius;\n      this.bulbLight.position.z = Math.sin(time) * radius;\n      this.bulbLight.position.y = 1.5;\n\n\n      const rotationSpeed = 0.005; // 设置球体的旋转速度\n      this.ballMesh.rotation.y += rotationSpeed; // 更新球体的旋转\n\n      this.renderer.render(this.scene, this.camera);\n      this.stats.update();\n    },\n\n    onWindowResize() {\n      this.camera.aspect = window.innerWidth / window.innerHeight;\n      this.camera.updateProjectionMatrix();\n      this.renderer.setSize(window.innerWidth, window.innerHeight);\n    },\n\n    initMaterials() {\n      this.textureLoader = new THREE.TextureLoader();\n      // Floor Material\n      this.floorMat = new MeshShader({\n        roughness: 0.8,\n        color: 0xffffff,\n        metalness: 0.2,\n        bumpScale: 1\n      });\n      this.textureLoader.load('img/hardwood2_diffuse.jpg', (map) => {\n        map.wrapS = THREE.RepeatWrapping;\n        map.wrapT = THREE.RepeatWrapping;\n        map.anisotropy = 4;\n        map.repeat.set(10, 24);\n        map.colorSpace = THREE.SRGBColorSpace;\n        this.floorMat.map = map;\n        this.floorMat.needsUpdate = true;\n      });\n      this.textureLoader.load('img/hardwood2_bump.jpg', (map) => {\n        map.wrapS = THREE.RepeatWrapping;\n        map.wrapT = THREE.RepeatWrapping;\n        map.anisotropy = 4;\n        map.repeat.set(10, 24);\n        this.floorMat.bumpMap = map;\n        this.floorMat.needsUpdate = true;\n      });\n      this.textureLoader.load('img/hardwood2_roughness.jpg', (map) => {\n        map.wrapS = THREE.RepeatWrapping;\n        map.wrapT = THREE.RepeatWrapping;\n        map.anisotropy = 4;\n        map.repeat.set(10, 24);\n        this.floorMat.roughnessMap = map;\n        this.floorMat.needsUpdate = true;\n      });\n\n      // Cube Material\n      this.cubeMat = new MeshShader({\n        roughness: 0.7,\n        color: 0xffffff,\n        bumpScale: 1,\n        metalness: 0.2\n      });\n      this.textureLoader.load('img/brick_diffuse.jpg', (map) => {\n        map.wrapS = THREE.RepeatWrapping;\n        map.wrapT = THREE.RepeatWrapping;\n        map.anisotropy = 4;\n        map.repeat.set(1, 1);\n        map.colorSpace = THREE.SRGBColorSpace;\n        this.cubeMat.map = map;\n        this.cubeMat.needsUpdate = true;\n      });\n      this.textureLoader.load('img/brick_bump.jpg', (map) => {\n        map.wrapS = THREE.RepeatWrapping;\n        map.wrapT = THREE.RepeatWrapping;\n        map.anisotropy = 4;\n        map.repeat.set(1, 1);\n        this.cubeMat.bumpMap = map;\n        this.cubeMat.needsUpdate = true;\n      });\n\n      // Ball Material\n      this.ballMat = new MeshShader({\n        color: 0xffffff,\n        roughness: 0.5,\n        metalness: 1.0\n      });\n      this.textureLoader.load('img/earth_atmos_2048.jpg', (map) => {\n        map.anisotropy = 4;\n        map.colorSpace = THREE.SRGBColorSpace;\n        this.ballMat.map = map;\n        this.ballMat.needsUpdate = true;\n      });\n      this.textureLoader.load('img/earth_specular_2048.jpg', (map) => {\n        map.anisotropy = 4;\n        map.colorSpace = THREE.SRGBColorSpace;\n        this.ballMat.metalnessMap = map;\n        this.ballMat.needsUpdate = true;\n      });\n    },\n\n    //创建盒子网格\n    createBoxMesh(geometry, x, y, z) {\n      const mesh = new THREE.Mesh(geometry, this.cubeMat);\n      mesh.position.set(x, y, z);\n      mesh.castShadow = true;\n      this.scene.add(mesh);\n    },\n  }\n};\n</script>\n\n<style>\n.full-screen-container {\n  width: 100vw;   /* 视窗的全宽 */\n  height: 100vh;  /* 视窗的全高 */\n  margin: 0;\n  padding: 0;\n  overflow: hidden;\n}\n\n</style>"],"mappings":";;EACOA,GAAG,EAAC,WAAW;EAACC,KAAK,EAAC;;;uBAA3BC,mBAAA,CAAyD,OAAzDC,UAAyD"},"metadata":{},"sourceType":"module","externalDependencies":[]}