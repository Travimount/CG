{"ast":null,"code":"import * as THREE from 'three';\nimport Stats from 'three/addons/libs/stats.module.js';\nimport { GUI } from 'three/addons/libs/lil-gui.module.min.js';\nimport { OrbitControls } from 'three/addons/controls/OrbitControls.js';\nimport '../Shader/MeshShader';\nimport { MeshShader } from \"@/Shader/MeshShader\";\nexport default {\n  name: 'HelloWorld',\n  data() {\n    return {\n      bulbLuminousPowers: {\n        '110000 lm ': 110000,\n        '3500 lm ': 3500,\n        '1700 lm ': 1700,\n        '800 lm ': 800,\n        '400 lm ': 400,\n        '180 lm ': 180,\n        '20 lm ': 20,\n        'Off': 0\n      },\n      hemiLuminousIrradiances: {\n        '0.0001 lx ': 0.0001,\n        '0.002 lx ': 0.002,\n        '0.5 lx ': 0.5,\n        '3.4 lx ': 3.4,\n        '50 lx ': 50,\n        '100 lx ': 100,\n        '350 lx ': 350,\n        '400 lx ': 400,\n        '1000 lx ': 1000,\n        '18000 lx ': 18000,\n        '50000 lx ': 50000\n      },\n      // 参数设置\n      params: {\n        shadows: true,\n        exposure: 0.68,\n        bulbPower: '800 lm ',\n        hemiIrradiance: '0.0001 lx '\n      }\n    };\n  },\n  mounted() {\n    this.initThreeJS();\n    this.animate();\n  },\n  methods: {\n    initThreeJS() {\n      const container = this.$refs.container;\n\n      // Stats\n      this.stats = new Stats();\n      container.appendChild(this.stats.dom);\n\n      // 设置相机\n      this.camera = new THREE.PerspectiveCamera(50, window.innerWidth / window.innerHeight, 0.1, 100);\n      this.camera.position.set(-4, 2, 4);\n\n      // 设置场景\n      this.scene = new THREE.Scene();\n\n      // 设置灯光、材质、地板、球体、盒子等对象\n      const bulbGeometry = new THREE.SphereGeometry(0.02, 16, 8);\n      this.bulbLight = new THREE.PointLight(0xffee88, 1, 100, 2);\n      this.bulbMat = new THREE.MeshStandardMaterial({\n        emissive: 0xffffee,\n        emissiveIntensity: 1,\n        color: 0x000000\n      });\n      this.bulbLight.add(new THREE.Mesh(bulbGeometry, this.bulbMat));\n      this.bulbLight.position.set(0, 2, 0);\n      this.bulbLight.castShadow = true;\n      this.scene.add(this.bulbLight);\n\n      // 半球光源\n      this.hemiLight = new THREE.HemisphereLight(0xddeeff, 0x0f0e0d, 0.02);\n      this.scene.add(this.hemiLight);\n\n      //材质\n      this.initMaterials();\n\n      //地板\n      const floorGeometry = new THREE.PlaneGeometry(10, 10);\n      const floorMesh = new THREE.Mesh(floorGeometry, this.floorMat);\n      floorMesh.receiveShadow = true;\n      floorMesh.rotation.x = -Math.PI / 2.0;\n      this.scene.add(floorMesh);\n\n      //球体\n      const ballGeometry = new THREE.SphereGeometry(0.5, 32, 32);\n      this.ballMesh = new THREE.Mesh(ballGeometry, this.ballMat);\n      this.ballMesh.position.set(0, 0.5, 3);\n      this.ballMesh.rotation.y = Math.PI;\n      this.ballMesh.castShadow = true;\n      this.scene.add(this.ballMesh);\n\n      //盒子\n      const boxGeometry = new THREE.BoxGeometry(0.5, 0.5, 0.5);\n      this.createBoxMesh(boxGeometry, -3, 0.25, 0);\n      this.createBoxMesh(boxGeometry, 0, 0.25, -3);\n      this.createBoxMesh(boxGeometry, 3, 0.25, 0);\n\n      //渲染器\n      this.renderer = new THREE.WebGLRenderer();\n      this.renderer.shadowMap.enabled = true;\n      this.renderer.toneMapping = THREE.ReinhardToneMapping;\n      this.renderer.setPixelRatio(window.devicePixelRatio);\n      this.renderer.setSize(window.innerWidth, window.innerHeight);\n      container.appendChild(this.renderer.domElement);\n\n      // 控制器\n      const controls = new OrbitControls(this.camera, this.renderer.domElement);\n      controls.minDistance = 1;\n      controls.maxDistance = 20;\n\n      //窗口尺寸变化\n      window.addEventListener('resize', this.onWindowResize);\n\n      // GUI\n      const gui = new GUI();\n      gui.add(this.params, 'hemiIrradiance', Object.keys(this.hemiLuminousIrradiances));\n      gui.add(this.params, 'bulbPower', Object.keys(this.bulbLuminousPowers));\n      gui.add(this.params, 'exposure', 0, 1);\n      gui.add(this.params, 'shadows');\n      gui.open();\n    },\n    animate() {\n      //动画循环\n      requestAnimationFrame(this.animate);\n      this.render();\n    },\n    //渲染函数\n    render() {\n      this.renderer.toneMappingExposure = Math.pow(this.params.exposure, 5.0); // Bright scenes\n      this.renderer.shadowMap.enabled = this.params.shadows;\n      this.bulbLight.castShadow = this.params.shadows;\n      if (this.params.shadows !== this.previousShadowMap) {\n        this.ballMat.needsUpdate = true;\n        this.cubeMat.needsUpdate = true;\n        this.floorMat.needsUpdate = true;\n        this.previousShadowMap = this.params.shadows;\n      }\n      this.bulbLight.power = this.bulbLuminousPowers[this.params.bulbPower];\n      this.bulbMat.emissiveIntensity = this.bulbLight.intensity / Math.pow(0.02, 2.0);\n      this.hemiLight.intensity = this.hemiLuminousIrradiances[this.params.hemiIrradiance];\n      const time = Date.now() * 0.0005;\n      const radius = 1.5;\n      this.bulbLight.position.x = Math.cos(time) * radius;\n      this.bulbLight.position.z = Math.sin(time) * radius;\n      this.bulbLight.position.y = 1.5;\n      const rotationSpeed = 0.005; // 设置球体的旋转速度\n      this.ballMesh.rotation.y += rotationSpeed; // 更新球体的旋转\n\n      this.renderer.render(this.scene, this.camera);\n      this.stats.update();\n    },\n    onWindowResize() {\n      this.camera.aspect = window.innerWidth / window.innerHeight;\n      this.camera.updateProjectionMatrix();\n      this.renderer.setSize(window.innerWidth, window.innerHeight);\n    },\n    initMaterials() {\n      this.textureLoader = new THREE.TextureLoader();\n      // Floor Material\n      this.floorMat = new MeshShader({\n        roughness: 0.8,\n        color: 0xffffff,\n        metalness: 0.2,\n        bumpScale: 1\n      });\n      this.textureLoader.load('img/hardwood2_diffuse.jpg', map => {\n        map.wrapS = THREE.RepeatWrapping;\n        map.wrapT = THREE.RepeatWrapping;\n        map.anisotropy = 4;\n        map.repeat.set(10, 24);\n        map.colorSpace = THREE.SRGBColorSpace;\n        this.floorMat.map = map;\n        this.floorMat.needsUpdate = true;\n      });\n      this.textureLoader.load('img/hardwood2_bump.jpg', map => {\n        map.wrapS = THREE.RepeatWrapping;\n        map.wrapT = THREE.RepeatWrapping;\n        map.anisotropy = 4;\n        map.repeat.set(10, 24);\n        this.floorMat.bumpMap = map;\n        this.floorMat.needsUpdate = true;\n      });\n      this.textureLoader.load('img/hardwood2_roughness.jpg', map => {\n        map.wrapS = THREE.RepeatWrapping;\n        map.wrapT = THREE.RepeatWrapping;\n        map.anisotropy = 4;\n        map.repeat.set(10, 24);\n        this.floorMat.roughnessMap = map;\n        this.floorMat.needsUpdate = true;\n      });\n\n      // Cube Material\n      this.cubeMat = new MeshShader({\n        roughness: 0.7,\n        color: 0xffffff,\n        bumpScale: 1,\n        metalness: 0.2\n      });\n      this.textureLoader.load('img/brick_diffuse.jpg', map => {\n        map.wrapS = THREE.RepeatWrapping;\n        map.wrapT = THREE.RepeatWrapping;\n        map.anisotropy = 4;\n        map.repeat.set(1, 1);\n        map.colorSpace = THREE.SRGBColorSpace;\n        this.cubeMat.map = map;\n        this.cubeMat.needsUpdate = true;\n      });\n      this.textureLoader.load('img/brick_bump.jpg', map => {\n        map.wrapS = THREE.RepeatWrapping;\n        map.wrapT = THREE.RepeatWrapping;\n        map.anisotropy = 4;\n        map.repeat.set(1, 1);\n        this.cubeMat.bumpMap = map;\n        this.cubeMat.needsUpdate = true;\n      });\n\n      // Ball Material\n      this.ballMat = new MeshShader({\n        color: 0xffffff,\n        roughness: 0.5,\n        metalness: 1.0\n      });\n      this.textureLoader.load('img/earth_atmos_2048.jpg', map => {\n        map.anisotropy = 4;\n        map.colorSpace = THREE.SRGBColorSpace;\n        this.ballMat.map = map;\n        this.ballMat.needsUpdate = true;\n      });\n      this.textureLoader.load('img/earth_specular_2048.jpg', map => {\n        map.anisotropy = 4;\n        map.colorSpace = THREE.SRGBColorSpace;\n        this.ballMat.metalnessMap = map;\n        this.ballMat.needsUpdate = true;\n      });\n    },\n    //创建盒子网格\n    createBoxMesh(geometry, x, y, z) {\n      const mesh = new THREE.Mesh(geometry, this.cubeMat);\n      mesh.position.set(x, y, z);\n      mesh.castShadow = true;\n      this.scene.add(mesh);\n    }\n  }\n};","map":{"version":3,"names":["THREE","Stats","GUI","OrbitControls","MeshShader","name","data","bulbLuminousPowers","hemiLuminousIrradiances","params","shadows","exposure","bulbPower","hemiIrradiance","mounted","initThreeJS","animate","methods","container","$refs","stats","appendChild","dom","camera","PerspectiveCamera","window","innerWidth","innerHeight","position","set","scene","Scene","bulbGeometry","SphereGeometry","bulbLight","PointLight","bulbMat","MeshStandardMaterial","emissive","emissiveIntensity","color","add","Mesh","castShadow","hemiLight","HemisphereLight","initMaterials","floorGeometry","PlaneGeometry","floorMesh","floorMat","receiveShadow","rotation","x","Math","PI","ballGeometry","ballMesh","ballMat","y","boxGeometry","BoxGeometry","createBoxMesh","renderer","WebGLRenderer","shadowMap","enabled","toneMapping","ReinhardToneMapping","setPixelRatio","devicePixelRatio","setSize","domElement","controls","minDistance","maxDistance","addEventListener","onWindowResize","gui","Object","keys","open","requestAnimationFrame","render","toneMappingExposure","pow","previousShadowMap","needsUpdate","cubeMat","power","intensity","time","Date","now","radius","cos","z","sin","rotationSpeed","update","aspect","updateProjectionMatrix","textureLoader","TextureLoader","roughness","metalness","bumpScale","load","map","wrapS","RepeatWrapping","wrapT","anisotropy","repeat","colorSpace","SRGBColorSpace","bumpMap","roughnessMap","metalnessMap","geometry","mesh"],"sources":["D:\\Course\\CG\\Final\\cgfinal\\src\\components\\HelloWorld.vue"],"sourcesContent":["<template>\n  <div ref=\"container\"></div>\n</template>\n\n<script>\n\nimport * as THREE from 'three';\nimport Stats from 'three/addons/libs/stats.module.js';\nimport { GUI } from 'three/addons/libs/lil-gui.module.min.js';\nimport { OrbitControls } from 'three/addons/controls/OrbitControls.js';\nimport '../Shader/MeshShader'\nimport {MeshShader} from \"@/Shader/MeshShader\";\nexport default {\n  name: 'HelloWorld',\n  data() {\n    return {\n      bulbLuminousPowers: {\n        '110000 lm ': 110000,\n        '3500 lm ': 3500,\n        '1700 lm ': 1700,\n        '800 lm ': 800,\n        '400 lm ': 400,\n        '180 lm ': 180,\n        '20 lm ': 20,\n        'Off': 0\n      },\n      hemiLuminousIrradiances: {\n        '0.0001 lx ': 0.0001,\n        '0.002 lx ': 0.002,\n        '0.5 lx ': 0.5,\n        '3.4 lx ': 3.4,\n        '50 lx ': 50,\n        '100 lx ': 100,\n        '350 lx ': 350,\n        '400 lx ': 400,\n        '1000 lx ': 1000,\n        '18000 lx ': 18000,\n        '50000 lx ': 50000\n      },\n      // 参数设置\n      params: {\n        shadows: true,\n        exposure: 0.68,\n        bulbPower: '800 lm ',\n        hemiIrradiance: '0.0001 lx '\n      }\n    };\n  },\n  mounted() {\n    this.initThreeJS();\n    this.animate();\n  },\n\n  methods: {\n    initThreeJS() {\n      const container = this.$refs.container;\n\n      // Stats\n      this.stats = new Stats();\n      container.appendChild(this.stats.dom);\n\n      // 设置相机\n      this.camera = new THREE.PerspectiveCamera(50, window.innerWidth / window.innerHeight, 0.1, 100);\n      this.camera.position.set(-4, 2, 4);\n\n      // 设置场景\n      this.scene = new THREE.Scene();\n\n      // 设置灯光、材质、地板、球体、盒子等对象\n      const bulbGeometry = new THREE.SphereGeometry(0.02, 16, 8);\n      this.bulbLight = new THREE.PointLight(0xffee88, 1, 100, 2);\n      this.bulbMat = new THREE.MeshStandardMaterial({\n        emissive: 0xffffee,\n        emissiveIntensity: 1,\n        color: 0x000000\n      });\n      this.bulbLight.add(new THREE.Mesh(bulbGeometry, this.bulbMat));\n      this.bulbLight.position.set(0, 2, 0);\n      this.bulbLight.castShadow = true;\n      this.scene.add(this.bulbLight);\n\n      // 半球光源\n      this.hemiLight = new THREE.HemisphereLight(0xddeeff, 0x0f0e0d, 0.02);\n      this.scene.add(this.hemiLight);\n\n      //材质\n      this.initMaterials();\n\n      //地板\n      const floorGeometry = new THREE.PlaneGeometry(10, 10);\n      const floorMesh = new THREE.Mesh(floorGeometry, this.floorMat);\n      floorMesh.receiveShadow = true;\n      floorMesh.rotation.x = -Math.PI / 2.0;\n      this.scene.add(floorMesh);\n\n      //球体\n      const ballGeometry = new THREE.SphereGeometry(0.5, 32, 32);\n      this.ballMesh = new THREE.Mesh(ballGeometry, this.ballMat);\n      this.ballMesh.position.set(0, 0.5, 3);\n      this.ballMesh.rotation.y = Math.PI;\n      this.ballMesh.castShadow = true;\n      this.scene.add(this.ballMesh);\n\n      //盒子\n      const boxGeometry = new THREE.BoxGeometry(0.5, 0.5, 0.5);\n      this.createBoxMesh(boxGeometry, -3, 0.25, 0);\n      this.createBoxMesh(boxGeometry, 0, 0.25, -3);\n      this.createBoxMesh(boxGeometry, 3, 0.25, 0);\n\n      //渲染器\n      this.renderer = new THREE.WebGLRenderer();\n      this.renderer.shadowMap.enabled = true;\n      this.renderer.toneMapping = THREE.ReinhardToneMapping;\n      this.renderer.setPixelRatio(window.devicePixelRatio);\n      this.renderer.setSize(window.innerWidth, window.innerHeight);\n      container.appendChild(this.renderer.domElement);\n\n      // 控制器\n      const controls = new OrbitControls(this.camera, this.renderer.domElement);\n      controls.minDistance = 1;\n      controls.maxDistance = 20;\n\n      //窗口尺寸变化\n      window.addEventListener('resize', this.onWindowResize);\n\n      // GUI\n      const gui = new GUI();\n      gui.add(this.params, 'hemiIrradiance', Object.keys(this.hemiLuminousIrradiances));\n      gui.add(this.params, 'bulbPower', Object.keys(this.bulbLuminousPowers));\n      gui.add(this.params, 'exposure', 0, 1);\n      gui.add(this.params, 'shadows');\n      gui.open();\n    },\n\n    animate() {\n      //动画循环\n      requestAnimationFrame(this.animate);\n      this.render();\n    },\n    //渲染函数\n    render() {\n      this.renderer.toneMappingExposure = Math.pow(this.params.exposure, 5.0); // Bright scenes\n      this.renderer.shadowMap.enabled = this.params.shadows;\n      this.bulbLight.castShadow = this.params.shadows;\n\n      if (this.params.shadows !== this.previousShadowMap) {\n        this.ballMat.needsUpdate = true;\n        this.cubeMat.needsUpdate = true;\n        this.floorMat.needsUpdate = true;\n        this.previousShadowMap = this.params.shadows;\n      }\n\n      this.bulbLight.power = this.bulbLuminousPowers[this.params.bulbPower];\n      this.bulbMat.emissiveIntensity = this.bulbLight.intensity / Math.pow(0.02, 2.0);\n\n      this.hemiLight.intensity = this.hemiLuminousIrradiances[this.params.hemiIrradiance];\n      const time = Date.now() * 0.0005;\n      const radius = 1.5;\n      this.bulbLight.position.x = Math.cos(time) * radius;\n      this.bulbLight.position.z = Math.sin(time) * radius;\n      this.bulbLight.position.y = 1.5;\n\n\n      const rotationSpeed = 0.005; // 设置球体的旋转速度\n      this.ballMesh.rotation.y += rotationSpeed; // 更新球体的旋转\n\n      this.renderer.render(this.scene, this.camera);\n      this.stats.update();\n    },\n\n    onWindowResize() {\n      this.camera.aspect = window.innerWidth / window.innerHeight;\n      this.camera.updateProjectionMatrix();\n      this.renderer.setSize(window.innerWidth, window.innerHeight);\n    },\n\n    initMaterials() {\n      this.textureLoader = new THREE.TextureLoader();\n      // Floor Material\n      this.floorMat = new MeshShader({\n        roughness: 0.8,\n        color: 0xffffff,\n        metalness: 0.2,\n        bumpScale: 1\n      });\n      this.textureLoader.load('img/hardwood2_diffuse.jpg', (map) => {\n        map.wrapS = THREE.RepeatWrapping;\n        map.wrapT = THREE.RepeatWrapping;\n        map.anisotropy = 4;\n        map.repeat.set(10, 24);\n        map.colorSpace = THREE.SRGBColorSpace;\n        this.floorMat.map = map;\n        this.floorMat.needsUpdate = true;\n      });\n      this.textureLoader.load('img/hardwood2_bump.jpg', (map) => {\n        map.wrapS = THREE.RepeatWrapping;\n        map.wrapT = THREE.RepeatWrapping;\n        map.anisotropy = 4;\n        map.repeat.set(10, 24);\n        this.floorMat.bumpMap = map;\n        this.floorMat.needsUpdate = true;\n      });\n      this.textureLoader.load('img/hardwood2_roughness.jpg', (map) => {\n        map.wrapS = THREE.RepeatWrapping;\n        map.wrapT = THREE.RepeatWrapping;\n        map.anisotropy = 4;\n        map.repeat.set(10, 24);\n        this.floorMat.roughnessMap = map;\n        this.floorMat.needsUpdate = true;\n      });\n\n      // Cube Material\n      this.cubeMat = new MeshShader({\n        roughness: 0.7,\n        color: 0xffffff,\n        bumpScale: 1,\n        metalness: 0.2\n      });\n      this.textureLoader.load('img/brick_diffuse.jpg', (map) => {\n        map.wrapS = THREE.RepeatWrapping;\n        map.wrapT = THREE.RepeatWrapping;\n        map.anisotropy = 4;\n        map.repeat.set(1, 1);\n        map.colorSpace = THREE.SRGBColorSpace;\n        this.cubeMat.map = map;\n        this.cubeMat.needsUpdate = true;\n      });\n      this.textureLoader.load('img/brick_bump.jpg', (map) => {\n        map.wrapS = THREE.RepeatWrapping;\n        map.wrapT = THREE.RepeatWrapping;\n        map.anisotropy = 4;\n        map.repeat.set(1, 1);\n        this.cubeMat.bumpMap = map;\n        this.cubeMat.needsUpdate = true;\n      });\n\n      // Ball Material\n      this.ballMat = new MeshShader({\n        color: 0xffffff,\n        roughness: 0.5,\n        metalness: 1.0\n      });\n      this.textureLoader.load('img/earth_atmos_2048.jpg', (map) => {\n        map.anisotropy = 4;\n        map.colorSpace = THREE.SRGBColorSpace;\n        this.ballMat.map = map;\n        this.ballMat.needsUpdate = true;\n      });\n      this.textureLoader.load('img/earth_specular_2048.jpg', (map) => {\n        map.anisotropy = 4;\n        map.colorSpace = THREE.SRGBColorSpace;\n        this.ballMat.metalnessMap = map;\n        this.ballMat.needsUpdate = true;\n      });\n    },\n\n    //创建盒子网格\n    createBoxMesh(geometry, x, y, z) {\n      const mesh = new THREE.Mesh(geometry, this.cubeMat);\n      mesh.position.set(x, y, z);\n      mesh.castShadow = true;\n      this.scene.add(mesh);\n    },\n  }\n};\n</script>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}