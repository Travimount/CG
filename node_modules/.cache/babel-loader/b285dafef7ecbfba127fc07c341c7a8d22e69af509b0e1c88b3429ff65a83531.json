{"ast":null,"code":"import { createElementVNode as _createElementVNode, createTextVNode as _createTextVNode, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = /*#__PURE__*/_createElementVNode(\"div\", {\n  id: \"container\"\n}, null, -1 /* HOISTED */);\nconst _hoisted_2 = /*#__PURE__*/_createElementVNode(\"div\", {\n  id: \"info\"\n}, [/*#__PURE__*/_createElementVNode(\"a\", {\n  href: \"https://threejs.org\",\n  target: \"_blank\",\n  rel: \"noopener\"\n}, \"three.js\"), /*#__PURE__*/_createTextVNode(\" - Physically accurate incandescent bulb by \"), /*#__PURE__*/_createElementVNode(\"a\", {\n  href: \"http://clara.io\",\n  target: \"_blank\",\n  rel: \"noopener\"\n}, \"Ben Houston\"), /*#__PURE__*/_createElementVNode(\"br\"), /*#__PURE__*/_createTextVNode(\" Real world scale: Brick cube is 50 cm in size. Globe is 50 cm in diameter.\"), /*#__PURE__*/_createElementVNode(\"br\"), /*#__PURE__*/_createTextVNode(\" Reinhard inline tonemapping with real-world light falloff (decay = 2). \")], -1 /* HOISTED */);\nconst _hoisted_3 = [_hoisted_1, _hoisted_2];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", null, [..._hoisted_3]);\n}","map":{"version":3,"names":["_createElementVNode","id","href","target","rel","_createTextVNode","_hoisted_1","_hoisted_2","_createElementBlock","_hoisted_3"],"sources":["D:\\Course\\CG\\Final\\cgfinal\\src\\components\\HelloWorld.vue"],"sourcesContent":["\n<template>\n  <div>\n    <div id=\"container\"></div>\n    <div id=\"info\">\n      <a href=\"https://threejs.org\" target=\"_blank\" rel=\"noopener\">three.js</a> - Physically accurate incandescent bulb by <a href=\"http://clara.io\" target=\"_blank\" rel=\"noopener\">Ben Houston</a><br />\n      Real world scale: Brick cube is 50 cm in size. Globe is 50 cm in diameter.<br/>\n      Reinhard inline tonemapping with real-world light falloff (decay = 2).\n    </div>\n  </div>\n</template>\n\n<script>\n\nimport * as THREE from 'three';\nimport Stats from 'three/addons/libs/stats.module.js';\nimport { GUI } from 'three/addons/libs/lil-gui.module.min.js';\nimport { OrbitControls } from 'three/addons/controls/OrbitControls.js';\n\nexport default {\n  name: 'HelloWorld',\n  data() {\n    return {\n      // Three.js 相关对象\n      camera: null,\n      scene: null,\n      renderer: null,\n      bulbLight: null,\n      bulbMat: null,\n      hemiLight: null,\n      stats: null, // 性能监视器\n      floorMat: null,\n      cubeMat: null,\n      ballMat: null,\n\n      // 控制参数\n      previousShadowMap: false, // 阴影映射控制\n      params: {\n        shadows: true, // 是否显示阴影\n        exposure: 0.68, // 曝光度\n        bulbPower: '800 lm (60W)', // 默认灯泡功率\n        hemiIrradiance: '0.5 lx (Full Moon)' // 默认环境光照射度\n      },\n\n      // 灯泡功率映射表\n      bulbLuminousPowers: {\n        '110000 lm (1000W)': 110000,\n        '3500 lm (300W)': 3500,\n        '1700 lm (100W)': 1700,\n        '800 lm (60W)': 800,\n        '400 lm (40W)': 400,\n        '180 lm (25W)': 180,\n        '20 lm (4W)': 20,\n        'Off': 0\n      },\n\n      // 半球光照射强度映射表\n      hemiLuminousIrradiances: {\n        '0.0001 lx (Moonless Night)': 0.0001,\n        '0.002 lx (Night Airglow)': 0.002,\n        '0.5 lx (Full Moon)': 0.5,\n        '3.4 lx (City Twilight)': 3.4,\n        '50 lx (Living Room)': 50,\n        '100 lx (Very Overcast)': 100,\n        '350 lx (Office Room)': 350,\n        '400 lx (Sunrise/Sunset)': 400,\n        '1000 lx (Overcast)': 1000,\n        '18000 lx (Daylight)': 18000,\n        '50000 lx (Direct Sun)': 50000\n      }\n    };\n  },\n\n  mounted() {\n    this.init();\n    this.animate();\n  },\n  methods: {\n    init() {\n      const container = this.$el.querySelector('#container');\n      this.stats = new Stats();\n      container.appendChild(this.stats.dom);\n\n      this.camera = new THREE.PerspectiveCamera(50, window.innerWidth / window.innerHeight, 0.1, 100);\n      this.camera.position.x = -4;\n      this.camera.position.z = 4;\n      this.camera.position.y = 2;\n\n      this.scene = new THREE.Scene();\n\n      // 灯泡几何和材料的创建\n      const bulbGeometry = new THREE.SphereGeometry(0.02, 16, 8);\n      this.bulbLight = new THREE.PointLight(0xffee88, 1, 100, 2);\n\n      this.bulbMat = new THREE.MeshStandardMaterial({\n        emissive: 0xffffee,\n        emissiveIntensity: 1,\n        color: 0x000000\n      });\n      this.bulbLight.add(new THREE.Mesh(bulbGeometry, this.bulbMat));\n      this.bulbLight.position.set(0, 2, 0);\n      this.bulbLight.castShadow = true;\n      this.scene.add(this.bulbLight);\n\n      // 其他光源和材料的设置...\n      this.renderer = new THREE.WebGLRenderer();\n      this.renderer.shadowMap.enabled = true;\n      this.renderer.toneMapping = THREE.ReinhardToneMapping;\n      this.renderer.setPixelRatio(window.devicePixelRatio);\n      this.renderer.setSize(window.innerWidth, window.innerHeight);\n      container.appendChild(this.renderer.domElement);\n\n      const controls = new OrbitControls(this.camera, this.renderer.domElement);\n      controls.minDistance = 1;\n      controls.maxDistance = 20;\n\n      window.addEventListener('resize', this.onWindowResize);\n\n      // 材料和纹理\n      this.floorMat = new THREE.MeshStandardMaterial({\n        roughness: 0.8,\n        color: 0xffffff,\n        metalness: 0.2,\n        bumpScale: 1\n      });\n      const textureLoader = new THREE.TextureLoader();\n      textureLoader.load(require('@/assets/hardwood2_diffuse.jpg'), (map) => {\n        map.wrapS = THREE.RepeatWrapping;\n        map.wrapT = THREE.RepeatWrapping;\n        map.anisotropy = 4;\n        map.repeat.set(10, 24);\n        map.colorSpace = THREE.SRGBColorSpace;\n        this.floorMat.map = map;\n        this.floorMat.needsUpdate = true;\n      });\n      textureLoader.load( require('@/assets/hardwood2_bump.jpg'), function ( map ) {\n\n        map.wrapS = THREE.RepeatWrapping;\n        map.wrapT = THREE.RepeatWrapping;\n        map.anisotropy = 4;\n        map.repeat.set(10, 24);\n        this.floorMat.bumpMap = map;\n        this.floorMat.needsUpdate = true;\n      });\n      textureLoader.load( require('@/assets/hardwood2_roughness.jpg'), function ( map ) {\n\n        map.wrapS = THREE.RepeatWrapping;\n        map.wrapT = THREE.RepeatWrapping;\n        map.anisotropy = 4;\n        map.repeat.set( 10, 24 );\n        this.floorMat.roughnessMap = map;\n        this.floorMat.needsUpdate = true;\n\n      } );\n      this.cubeMat = new THREE.MeshStandardMaterial( {\n        roughness: 0.7,\n        color: 0xffffff,\n        bumpScale: 1,\n        metalness: 0.2\n      } );\n      textureLoader.load( require('@/assets/brick_diffuse.jpg'), function ( map ) {\n\n        map.wrapS = THREE.RepeatWrapping;\n        map.wrapT = THREE.RepeatWrapping;\n        map.anisotropy = 4;\n        map.repeat.set( 1, 1 );\n        map.colorSpace = THREE.SRGBColorSpace;\n        this.cubeMat.map = map;\n        this.cubeMat.needsUpdate = true;\n\n      } );\n      textureLoader.load( require('@/assets/brick_bump.jpg'), function ( map ) {\n\n        map.wrapS = THREE.RepeatWrapping;\n        map.wrapT = THREE.RepeatWrapping;\n        map.anisotropy = 4;\n        map.repeat.set( 1, 1 );\n        this.cubeMat.bumpMap = map;\n        this.cubeMat.needsUpdate = true;\n\n      } );\n\n      this.ballMat = new THREE.MeshStandardMaterial( {\n        color: 0xffffff,\n        roughness: 0.5,\n        metalness: 1.0\n      } );\n      textureLoader.load( require('@/assets/earth_atmos_2048.jpg'), function ( map ) {\n\n        map.anisotropy = 4;\n        map.colorSpace = THREE.SRGBColorSpace;\n        this.ballMat.map = map;\n        this.ballMat.needsUpdate = true;\n\n      } );\n      textureLoader.load( require('@/assets/earth_specular_2048.jpg'), function ( map ) {\n\n        map.anisotropy = 4;\n        map.colorSpace = THREE.SRGBColorSpace;\n        this.ballMat.metalnessMap = map;\n        this.ballMat.needsUpdate = true;\n\n      } );\n\n      // 几何体和网格\n      const floorGeometry = new THREE.PlaneGeometry(20, 20);\n      const floorMesh = new THREE.Mesh(floorGeometry, this.floorMat);\n      floorMesh.receiveShadow = true;\n      floorMesh.rotation.x = -Math.PI / 2.0;\n      this.scene.add(floorMesh);\n\n      const ballGeometry = new THREE.SphereGeometry(0.25, 32, 32);\n      const ballMesh = new THREE.Mesh(ballGeometry, this.ballMat);\n      ballMesh.position.set(1, 0.25, 1);\n      ballMesh.rotation.y = Math.PI;\n      ballMesh.castShadow = true;\n      this.scene.add(ballMesh);\n\n      const boxGeometry = new THREE.BoxGeometry(0.5, 0.5, 0.5);\n      const boxMesh = new THREE.Mesh(boxGeometry, this.cubeMat);\n      boxMesh.position.set(-0.5, 0.25, -1);\n      boxMesh.castShadow = true;\n      this.scene.add(boxMesh);\n\n      const boxMesh2 = new THREE.Mesh( boxGeometry, this.cubeMat );\n      boxMesh2.position.set( 0, 0.25, - 5 );\n      boxMesh2.castShadow = true;\n      this.scene.add( boxMesh2 );\n\n      const boxMesh3 = new THREE.Mesh( boxGeometry, this.cubeMat );\n      boxMesh3.position.set( 7, 0.25, 0 );\n      boxMesh3.castShadow = true;\n      this.scene.add( boxMesh3 );\n\n      // 窗口大小变化的事件处理\n      window.addEventListener('resize', this.onWindowResize);\n\n      // GUI 控制器\n      const gui = new GUI();\n      gui.add(this.params, 'hemiIrradiance', Object.keys(this.hemiLuminousIrradiances));\n      gui.add(this.params, 'bulbPower', Object.keys(this.bulbLuminousPowers));\n      gui.add(this.params, 'exposure', 0, 1);\n      gui.add(this.params, 'shadows');\n\n      gui.open();\n\n    },\n    animate() {\n      requestAnimationFrame(this.animate);\n      this.render();\n    },\n    render() {\n      // 更新渲染器的曝光度\n      this.renderer.toneMappingExposure = Math.pow(this.params.exposure, 5.0); // 适应非常明亮的场景\n      this.renderer.shadowMap.enabled = this.params.shadows;\n      this.bulbLight.castShadow = this.params.shadows;\n\n      if (this.params.shadows !== this.previousShadowMap) {\n        this.ballMat.needsUpdate = true;\n        this.cubeMat.needsUpdate = true;\n        this.floorMat.needsUpdate = true;\n        this.previousShadowMap = this.params.shadows;\n      }\n\n      // 设置灯泡的功率和辐射强度\n      this.bulbLight.power = this.bulbLuminousPowers[this.params.bulbPower];\n      this.bulbMat.emissiveIntensity = this.bulbLight.intensity / Math.pow(0.02, 2.0); // 从强度转换为灯泡表面的辐照度\n\n      this.hemiLight.intensity = this.hemiLuminousIrradiances[this.params.hemiIrradiance];\n\n      // 动画或时间相关的更新\n      const time = Date.now() * 0.0005;\n      this.bulbLight.position.y = Math.cos(time) * 0.75 + 1.25;\n\n      // 渲染场景和相机\n      this.renderer.render(this.scene, this.camera);\n\n      // 更新性能监视器\n      this.stats.update();\n    },\n    onWindowResize() {\n      this.camera.aspect = window.innerWidth / window.innerHeight;\n      this.camera.updateProjectionMatrix();\n      this.renderer.setSize(window.innerWidth, window.innerHeight);\n    }\n  }\n}\n</script>"],"mappings":";gCAGIA,mBAAA,CAA0B;EAArBC,EAAE,EAAC;AAAW;gCACnBD,mBAAA,CAIM;EAJDC,EAAE,EAAC;AAAM,I,aACZD,mBAAA,CAAyE;EAAtEE,IAAI,EAAC,qBAAqB;EAACC,MAAM,EAAC,QAAQ;EAACC,GAAG,EAAC;GAAW,UAAQ,G,aAL3EC,gBAAA,CAK+E,8CAA4C,G,aAAAL,mBAAA,CAAwE;EAArEE,IAAI,EAAC,iBAAiB;EAACC,MAAM,EAAC,QAAQ;EAACC,GAAG,EAAC;GAAW,aAAW,G,aAAIJ,mBAAA,CAAM,O,aALzMK,gBAAA,CAKyM,6EACzH,G,aAAAL,mBAAA,CAAK,O,aANrFK,gBAAA,CAMqF,0EAEjF,E;oBALAC,UAA0B,EAC1BC,UAIM,C;;uBANRC,mBAAA,CAOM,aATR,IAAAC,UAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}